     1                                  ; OZ - A more utopian OS
     2                                  ; ex: set expandtab softtabstop=4 shiftwidth=4 nowrap :
     3                                  ;
     4                                  ;
     5                                  ;       x86-64 startup 
     6                                  ;
     7                                  ;
     8                                  ; usage:
     9                                  ;	$ qemu-system-x86_64 -boot a -fda oz_fd -monitor stdio
    10                                  ;
    11                                  ; requires: nasm-2.07  or later from: http://www.nasm.us
    12                                  ;
    13                                  ; credits:
    14                                  ;       many thanks to the folks at wiki.osdev.org who archive great info.
    15                                  ;       http://wiki.osdev.org/Entering_Long_Mode_Directly
    16                                  ;
    17                                  ; contributors:
    18                                  ;        djv - Duane Voth
    19                                  ;
    20                                  ; history:
    21                                  ; 2015/10/12 - 0.00.64 - djv - dup oz-x86-32-asm-001, get into 64bit mode
    22                                  
    23                                  %ifdef USB
    24                                  [map symbols oz_usb.map]
    25                                  %else
    26                                  [map symbols oz_fd.map]
    27                                  %endif
    28                                  
    29                                  ; -------- stage 1 ---------------------------------------------------------
    30                                  ; A classic x86 Master Boot Record
    31                                  
    32                                  section .text start=0x7c00  ; PC BIOS boot loader entry point
    33                                  codestart :
    34                                  
    35                                  bios_entry :
    36 00000000 FA                          cli
    37 00000001 EA[0C00]0000                jmp 0:main              ; load cs, skip over mbr data struct
    38                                  
    39                                  times 6-($-$$)  db 0
    40 00000006 6F7A                    oemid db "oz"
    41                                  
    42 00000008 00<rept>                times 11-($-$$)  db 0
    43                                  
    44                                  ; compute the size of the kernel image in 512 byte sectors
    45                                  nsectors equ codesize/512
    46                                  
    47                                  ; -------- main (enter protected mode) --------
    48                                  bits 16
    49 0000000B 90                      align 2
    50                                  
    51                                  main :
    52 0000000C B80070                      mov  ax,kstack_loc
    53 0000000F 89C4                        mov  sp,ax
    54 00000011 31C0                        xor  ax,ax
    55 00000013 8ED0                        mov  ss,ax
    56 00000015 8EC0                        mov  es,ax
    57 00000017 8ED8                        mov  ds,ax
    58 00000019 8EE0                        mov  fs,ax
    59 0000001B 8EE8                        mov  gs,ax
    60 0000001D FC                          cld
    61                                  
    62 0000001E 52                          push dx                 ; save BIOS drive number
    63                                  
    64 0000001F B80006                      mov  ax,0x0600          ; ah=06h : scroll window up, if al = 0 clrscr
    65 00000022 B90000                      mov  cx,0x0000          ; clear window from 0,0 
    66 00000025 BA4F17                      mov  dx,0x174f          ; to 23,79
    67 00000028 B70F                        mov  bh,0xf             ; fill with hi white
    68 0000002A CD10                        int  0x10               ; clear screen for direct writes to video memory
    69                                  
    70 0000002C BE[5400]                    mov  si,bootmsg
    71 0000002F 31DB                        xor  bx,bx
    72 00000031 E8F700                      call puts_vga_rm
    73                                                              ; puts_vga_rm leaves gs pointing at video mem
    74 00000034 65C60601000E                mov  byte [gs:1],0xE    ; turn the first two chars yellow
    75 0000003A 65C60603000E                mov  byte [gs:3],0xE
    76                                  
    77                                      ; ---- verify this is a 64bit processor
    78                                  
    79 00000040 669C                        pushfd
    80 00000042 6658                        pop  eax
    81 00000044 6689C3                      mov  ebx,eax
    82 00000047 663500002000                xor  eax,0x200000       ; flip the cpuid test flag
    83 0000004D 6650                        push eax
    84 0000004F 669D                        popfd
    85 00000051 669C                        pushfd
    86 00000053 6658                        pop  eax
    87 00000055 6631D8                      xor  eax,ebx            ; did anything change?
    88 00000058 750B                        jnz  have_cpuid
    89                                  
    90                                  not64 :
    91 0000005A BE[6D00]                    mov  si,no64msg
    92 0000005D 31DB                        xor  bx,bx
    93 0000005F E8C900                      call puts_vga_rm
    94                                  halt :
    95 00000062 F4                          hlt
    96 00000063 EBFD                        jmp  halt               ; we're done
    97                                  
    98                                  have_cpuid :
    99 00000065 6653                        push ebx
   100 00000067 669D                        popfd                   ; restore flags
   101                                  
   102 00000069 66B800000080                mov  eax,0x80000000
   103 0000006F 0FA2                        cpuid
   104 00000071 663D01000080                cmp  eax,0x80000001     ; is extended function 0x80000001 available?
   105 00000077 72E1                        jb   not64
   106                                  
   107 00000079 66B801000080                mov  eax,0x80000001
   108 0000007F 0FA2                        cpuid
   109 00000081 66F7C200000020              test edx, 1 << 29       ; test LM bit
   110 00000088 74D0                        jz   not64
   111                                  
   112                                      ; ---- setup 4KB paging tables
   113                                      ;           swdev3a s4.5 pg 4-25 fig 4-8
   114                                      ;           swdev3a s4.6 pg 4-23 fig 4-10
   115                                  
   116 0000008A 66BF00100000                mov  edi,pml4e          ; first pml4
   117 00000090 0F22DF                      mov  cr3,edi            ; install it in cr3
   118 00000093 66B807200000                mov  eax,pdpte + 7
   119 00000099 66AB                        stosd
   120 0000009B 6631C0                      xor  eax,eax
   121 0000009E 66B9FF030000                mov  ecx,0x400-1
   122 000000A4 F366AB                      rep  stosd
   123                                  
   124                                              ; assume pdpte physically follows pml4
   125                                  
   126 000000A7 B80730                      mov  ax,pgdir + 7       ; next setup the pdpte
   127 000000AA 66AB                        stosd
   128 000000AC 6631C0                      xor  eax,eax
   129 000000AF B9FF03                      mov  cx,0x400-1
   130 000000B2 F366AB                      rep  stosd
   131                                  
   132                                              ; assume pgdir physically follows pdpte
   133                                  
   134 000000B5 B80740                      mov  ax,pgtb0 + 7       ; page table 0: present, pl=3, r/w
   135 000000B8 66AB                        stosd                   ; ... pl=3 for now (simplify vga access)
   136 000000BA 6631C0                      xor  eax,eax            ; invalidate the rest of the addr space
   137 000000BD B9FF03                      mov  cx,0x400-1
   138 000000C0 F366AB                      rep stosd
   139                                  
   140                                              ; assume pgtb0 physically follows pgdir
   141                                              ; pgtb0 is the page table for kernel memory
   142                                  
   143 000000C3 66AB                        stosd                   ; access to page 0 will always cause a fault
   144 000000C5 66AB                        stosd
   145 000000C7 6689C3                      mov  ebx,eax
   146 000000CA B80310                      mov  ax,0x1000 + 3      ; rest are direct map: present, pl=0, r/w
   147 000000CD B9FF01                      mov  cx,0x200-1
   148                                  pgtb0_fill :
   149 000000D0 66AB                        stosd
   150 000000D2 6693                        xchg eax,ebx
   151 000000D4 66AB                        stosd
   152 000000D6 6693                        xchg eax,ebx
   153 000000D8 660500100000                add  eax,0x1000
   154 000000DE E2F0                        loop pgtb0_fill
   155                                  
   156                                              ; enable paging and protected mode
   157                                  
   158 000000E0 66B8A0000000                mov  eax,0xa0
   159 000000E6 0F22E0                      mov  cr4,eax            ; set the pae and pge
   160                                  
   161 000000E9 66B9800000C0                mov ecx,0xc0000080      ; get the efer msr
   162 000000EF 0F32                        rdmsr    
   163 000000F1 0D0001                      or  ax,0x00000100       ; set lme
   164 000000F4 0F30                        wrmsr
   165                                  
   166 000000F6 0F20C0                      mov eax,cr0
   167 000000F9 660D01000080                or  eax,0x80000001      ; enable paging and protected mode together
   168 000000FF 0F22C0                      mov cr0,eax 
   169                                  
   170                                      ; ----
   171                                  
   172 00000102 0F0116[4000]                lgdt [gdtr]             ; initialize the gdt
   173 00000107 EA[0C01]1000                jmp  codesel:flush_ip1  ; flush the cpu instruction pipeline
   174                                  flush_ip1: 
   175                                  bits 64                     ; instructions after this point are 64bit
   176                                  
   177 0000010C 66B82000                    mov  ax,datasel         ; yes its silly to load the segments regs in 64bit
   178 00000110 8ED8                        mov  ds,ax              ; mode (only fs & gs can be used) but this helps us
   179 00000112 8EC0                        mov  es,ax              ; check to see if we are parsing the qemu register
   180 00000114 8ED0                        mov  ss,ax              ; dumps correctly
   181 00000116 8EE0                        mov  fs,ax
   182 00000118 66B83000                    mov  ax,videosel
   183 0000011C 8EE8                        mov  gs,ax
   184                                  
   185                                      ; ---- debug marker
   186 0000011E 65C643010A                  mov  byte [gs:rbx+1],0xA        ; turn the first two chars green
   187 00000123 65C643030A                  mov  byte [gs:rbx+3],0xA
   188                                  
   189                                      ;sti                     ; can't do this ...
   190                                  idle :
   191 00000128 F4                          hlt                     ; wait for interrupts
   192 00000129 EBFD                        jmp  idle
   193                                  
   194                                  ; ----------------------------
   195                                  ;   puts_vga_rm - write a null delimited string to the VGA controller
   196                                  ;                  in real mode
   197                                  ;
   198                                  ;           esi - address of string
   199                                  ;           ebx - screen location (2 bytes per char, 160 bytes per line)
   200                                  ;           eax - destroyed
   201                                  ;            gs - destroyed
   202                                  bits 16
   203                                  
   204                                  puts_vga_rm :
   205 0000012B B800B8                      mov  ax,0xb800      ; point gs at video memory
   206 0000012E 8EE8                        mov  gs,ax
   207                                  puts_vga_rm_loop :
   208 00000130 AC                          lodsb
   209 00000131 3C00                        cmp  al,0
   210 00000133 7409                        jz   puts_vga_rm_done
   211 00000135 658807                      mov  [gs:bx],al
   212 00000138 6643                        inc  ebx
   213 0000013A 6643                        inc  ebx
   214 0000013C EBF2                        jmp  puts_vga_rm_loop
   215                                  puts_vga_rm_done :
   216 0000013E C3                          ret
   217                                  
   218 0000013F 90                      align 8                     ; only need 4 but 8 looks nicer when debugging
   219                                  codesize equ ($-codestart)
   220                                  
   221                                  ; ---------------------------------------------------------
   222                                  section .data
   223                                  datastart :
   224                                  
   225                                  ; -------- descriptors --------------
   226                                  ; Intel SW dev manual 3a, 3.4.5, pg 103
   227                                  ;
   228                                  ; In my opinion, macros for descriptor entries
   229                                  ; don't make the code that much more readable.
   230                                  
   231                                  gdt :
   232                                  nullsel equ $-gdt           ; nullsel = 0h
   233 00000000 000000000000000000-         dq 0,0                  ; first descriptor per convention is 0
   234 00000009 00000000000000     
   235                                  
   236                                  codesel equ $-gdt           ; codesel = 10h  4Gb flat over all logical mem
   237 00000010 0000                        dw 0x0000               ; limit 0-15
   238 00000012 0000                        dw 0x0000               ; base  0-15
   239 00000014 00                          db 0x00                 ; base 16-23
   240 00000015 9A                          db 0x9a                 ; present, dpl=0, code e/r
   241 00000016 20                          db 0x20                 ; 4k granular, 64bit/8bit, limit 16-19
   242 00000017 00                          db 0x00                 ; base 24-31
   243 00000018 00000000                    dd 0                    ; base 32-63
   244 0000001C 00000000                    dd 0
   245                                  
   246                                  datasel equ $-gdt           ; datasel = 20h  4Gb flat over all logical mem
   247 00000020 0000                        dw 0x0000               ; limit 0-15
   248 00000022 0000                        dw 0x0000               ; base  0-15
   249 00000024 00                          db 0x00                 ; base 16-23
   250 00000025 92                          db 0x92                 ; present, dpl=0, data r/w
   251 00000026 20                          db 0x20                 ; 4k granular, 64bit/8bit, limit 16-19
   252 00000027 00                          db 0x00                 ; base 24-31
   253 00000028 00000000                    dd 0                    ; base 32-63
   254 0000002C 00000000                    dd 0
   255                                  
   256                                  videosel equ $-gdt          ; videosel = 30h
   257 00000030 9F0F                        dw 3999                 ; limit 80*25*2-1
   258 00000032 0080                        dw 0x8000               ; base 0xb8000
   259 00000034 0B                          db 0x0b
   260 00000035 92                          db 0x92                 ; present, dpl=0, data, r/w
   261 00000036 20                          db 0x20                 ; byte granular, 64bit/8bit
   262 00000037 00                          db 0
   263 00000038 00000000                    dd 0                    ; base 32-63
   264 0000003C 00000000                    dd 0
   265                                  
   266                                  gdt_end :
   267                                  
   268                                  gdtr :
   269 00000040 3F00                        dw gdt_end - gdt - 1    ; gdt length
   270 00000042 [0000000000000000]          dq gdt                  ; gdt physical address
   271                                  
   272                                  idtr :
   273 0000004A 7F01                        dw idt_end - idt - 1    ; length of the idt
   274 0000004C 0060000000000000            dq idt                  ; address of the idt
   275                                  
   276 00000054 4F5A2076302E30302E-     bootmsg     db      "OZ v0.00.64 - 2015/10/12",0
   277 0000005D 3634202D2032303135-
   278 00000066 2F31302F313200     
   279 0000006D 637075206E6F742036-     no64msg     db      "cpu not 64bit ",0
   280 00000076 346269742000       
   281                                  
   282 0000007C 00<rept>                times 446-codesize-($-$$)  db 0 ; Fill with zeros up to the partition table
   283                                  
   284                                  %ifdef USB
   285                                  ; a partition table for my 512MB USB stick
   286 0000007E 800101000610E0BE20-     db 0x80, 0x01, 0x01, 0, 0x06, 0x10, 0xe0, 0xbe, 0x20, 0, 0, 0, 0xe0, 0x7b, 0xf, 0
   287 00000087 000000E07B0F00     
   288 0000008E 000000000000000000-     db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   289 00000097 00000000000000     
   290 0000009E 000000000000000000-     db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   291 000000A7 00000000000000     
   292 000000AE 000000000000000000-     db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   293 000000B7 00000000000000     
   294                                  %else
   295                                              ; A default partition table that matches a 1.44MB floppy
   296                                              db 0x80,0x01,0x01,0x00,0x06,0x01,0x12,0x4f
   297                                              db 0x12,0x00,0x00,0x00,0x2e,0x0b,0x00,0x00
   298                                              db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   299                                              db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   300                                              db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   301                                  %endif
   302                                  
   303                                  times 510-codesize-($-$$) db 0      ; fill with zeros up to MBR signature
   304                                  
   305 000000BE 55AA                                dw 0x0aa55      ; write aa55 in bytes 511,512 to indicate
   306                                                              ; that it is a boot sector. 
   307                                  
   308                                  pml4e equ 0x1000            ; use some of the free memory below us
   309                                  pdpte equ 0x2000            ; code above assumes this follows pml4e
   310                                  pgdir equ 0x3000            ; code above assumes this follows pdpte
   311                                  pgtb0 equ 0x4000            ; code above assumes this follows pgdir
   312                                  
   313                                  idt equ 0x6000
   314                                  idt_end equ idt+48*8        ; 32 sw + 16 remapped hw vectors
   315                                  
   316                                  kstack_loc  equ 0x7000
   317                                  kstack_size equ 1024
   318                                  
   319                                  datasize equ ($-datastart)
   320                                  
   321                                  kend :
