
lib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <printf>:

static const char xdigits[16] = { "0123456789abcdef" };

int
printf(const char * fmt, ...)
{
   0:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
   4:	910003fd 	mov	x29, sp
   8:	f9002fe1 	str	x1, [sp, #88]
   c:	f90033e2 	str	x2, [sp, #96]
  10:	f90037e3 	str	x3, [sp, #104]
  14:	f9003be4 	str	x4, [sp, #112]
  18:	f9003fe5 	str	x5, [sp, #120]
  1c:	f90043e6 	str	x6, [sp, #128]
  20:	f90047e7 	str	x7, [sp, #136]
    static char buf[1024];
    char nbuf[32];
    int rc;
    va_list ap;
    va_start(ap, fmt);
  24:	910243e1 	add	x1, sp, #0x90
  28:	f9000be1 	str	x1, [sp, #16]
  2c:	f9000fe1 	str	x1, [sp, #24]
  30:	910143e1 	add	x1, sp, #0x50
  34:	f90013e1 	str	x1, [sp, #32]
  38:	128006e1 	mov	w1, #0xffffffc8            	// #-56
  3c:	b9002be1 	str	w1, [sp, #40]
  40:	b9002fff 	str	wzr, [sp, #44]

    char * q = buf;
    for (const char * p = fmt; *p; p++) {
  44:	39400002 	ldrb	w2, [x0]
  48:	340013e2 	cbz	w2, 2c4 <printf+0x2c4>
                while (*s)  *q++ = *s++;
                break;
            case 'x':
                *q++ = '0';
                *q++ = 'x';
                u = va_arg(ap, unsigned long);
  4c:	f9400feb 	ldr	x11, [sp, #24]
    char * q = buf;
  50:	90000001 	adrp	x1, 0 <printf>
  54:	91000021 	add	x1, x1, #0x0
                    *s++ = '0' + u % 10;
  58:	b202e7e8 	mov	x8, #0xcccccccccccccccc    	// #-3689348814741910324
  5c:	f29999a8 	movk	x8, #0xcccd
                while (s > nbuf)  *q++ = *--s;
  60:	9100c3e6 	add	x6, sp, #0x30
                if (s == 0) s = "(null)";
  64:	9000000c 	adrp	x12, 0 <printf>
                while (*s)  *q++ = *s++;
  68:	5280050d 	mov	w13, #0x28                  	// #40
                *q++ = '0';
  6c:	5280060a 	mov	w10, #0x30                  	// #48
                *q++ = 'x';
  70:	52800f09 	mov	w9, #0x78                  	// #120
                s = nbuf;
                do {
                    *s++ = xdigits[u % 16];
  74:	90000007 	adrp	x7, 0 <printf>
  78:	910000e7 	add	x7, x7, #0x0
  7c:	14000079 	b	260 <printf+0x260>
            switch (*++p) {
  80:	71018c1f 	cmp	w0, #0x63
  84:	54000e81 	b.ne	254 <printf+0x254>  // b.any
                u = va_arg(ap, int);
  88:	b9402be2 	ldr	w2, [sp, #40]
  8c:	f9400be0 	ldr	x0, [sp, #16]
  90:	37f800e2 	tbnz	w2, #31, ac <printf+0xac>
  94:	91002c02 	add	x2, x0, #0xb
  98:	927df042 	and	x2, x2, #0xfffffffffffffff8
  9c:	f9000be2 	str	x2, [sp, #16]
  a0:	b9800000 	ldrsw	x0, [x0]
                *q++ = u;
  a4:	38001420 	strb	w0, [x1], #1
                break;
  a8:	1400006b 	b	254 <printf+0x254>
                u = va_arg(ap, int);
  ac:	11002043 	add	w3, w2, #0x8
  b0:	b9002be3 	str	w3, [sp, #40]
  b4:	7100007f 	cmp	w3, #0x0
  b8:	540000ad 	b.le	cc <printf+0xcc>
  bc:	91002c02 	add	x2, x0, #0xb
  c0:	927df042 	and	x2, x2, #0xfffffffffffffff8
  c4:	f9000be2 	str	x2, [sp, #16]
  c8:	17fffff6 	b	a0 <printf+0xa0>
  cc:	8b22c160 	add	x0, x11, w2, sxtw
  d0:	17fffff4 	b	a0 <printf+0xa0>
                u = va_arg(ap, int);
  d4:	b9402be2 	ldr	w2, [sp, #40]
  d8:	f9400be0 	ldr	x0, [sp, #16]
  dc:	37f800e2 	tbnz	w2, #31, f8 <printf+0xf8>
  e0:	91002c02 	add	x2, x0, #0xb
  e4:	927df042 	and	x2, x2, #0xfffffffffffffff8
  e8:	f9000be2 	str	x2, [sp, #16]
  ec:	b9800003 	ldrsw	x3, [x0]
                s = nbuf;
  f0:	9100c3e5 	add	x5, sp, #0x30
  f4:	1400000c 	b	124 <printf+0x124>
                u = va_arg(ap, int);
  f8:	11002043 	add	w3, w2, #0x8
  fc:	b9002be3 	str	w3, [sp, #40]
 100:	7100007f 	cmp	w3, #0x0
 104:	540000ad 	b.le	118 <printf+0x118>
 108:	91002c02 	add	x2, x0, #0xb
 10c:	927df042 	and	x2, x2, #0xfffffffffffffff8
 110:	f9000be2 	str	x2, [sp, #16]
 114:	17fffff6 	b	ec <printf+0xec>
 118:	8b22c160 	add	x0, x11, w2, sxtw
 11c:	17fffff4 	b	ec <printf+0xec>
                    u /= 10;
 120:	aa0203e3 	mov	x3, x2
                    *s++ = '0' + u % 10;
 124:	9bc87c62 	umulh	x2, x3, x8
 128:	d343fc42 	lsr	x2, x2, #3
 12c:	8b020840 	add	x0, x2, x2, lsl #2
 130:	cb000460 	sub	x0, x3, x0, lsl #1
 134:	1100c000 	add	w0, w0, #0x30
 138:	380014a0 	strb	w0, [x5], #1
                } while (u);
 13c:	f100247f 	cmp	x3, #0x9
 140:	54ffff08 	b.hi	120 <printf+0x120>  // b.pmore
                while (s > nbuf)  *q++ = *--s;
 144:	eb0600bf 	cmp	x5, x6
 148:	54000869 	b.ls	254 <printf+0x254>  // b.plast
                    *s++ = '0' + u % 10;
 14c:	aa0503e0 	mov	x0, x5
                while (s > nbuf)  *q++ = *--s;
 150:	aa0103e2 	mov	x2, x1
 154:	385ffc03 	ldrb	w3, [x0, #-1]!
 158:	38001443 	strb	w3, [x2], #1
 15c:	eb06001f 	cmp	x0, x6
 160:	54ffffa1 	b.ne	154 <printf+0x154>  // b.any
 164:	cb0600a5 	sub	x5, x5, x6
 168:	8b050021 	add	x1, x1, x5
 16c:	1400003a 	b	254 <printf+0x254>
                s = va_arg(ap, char *);
 170:	b9402be2 	ldr	w2, [sp, #40]
 174:	f9400be0 	ldr	x0, [sp, #16]
 178:	37f80182 	tbnz	w2, #31, 1a8 <printf+0x1a8>
 17c:	91003c02 	add	x2, x0, #0xf
 180:	927df042 	and	x2, x2, #0xfffffffffffffff8
 184:	f9000be2 	str	x2, [sp, #16]
 188:	f9400002 	ldr	x2, [x0]
                if (s == 0) s = "(null)";
 18c:	b4000222 	cbz	x2, 1d0 <printf+0x1d0>
                while (*s)  *q++ = *s++;
 190:	39400040 	ldrb	w0, [x2]
 194:	34000600 	cbz	w0, 254 <printf+0x254>
 198:	38001420 	strb	w0, [x1], #1
 19c:	38401c40 	ldrb	w0, [x2, #1]!
 1a0:	35ffffc0 	cbnz	w0, 198 <printf+0x198>
 1a4:	1400002c 	b	254 <printf+0x254>
                s = va_arg(ap, char *);
 1a8:	11002043 	add	w3, w2, #0x8
 1ac:	b9002be3 	str	w3, [sp, #40]
 1b0:	7100007f 	cmp	w3, #0x0
 1b4:	540000ad 	b.le	1c8 <printf+0x1c8>
 1b8:	91003c02 	add	x2, x0, #0xf
 1bc:	927df042 	and	x2, x2, #0xfffffffffffffff8
 1c0:	f9000be2 	str	x2, [sp, #16]
 1c4:	17fffff1 	b	188 <printf+0x188>
 1c8:	8b22c160 	add	x0, x11, w2, sxtw
 1cc:	17ffffef 	b	188 <printf+0x188>
                if (s == 0) s = "(null)";
 1d0:	91000182 	add	x2, x12, #0x0
                while (*s)  *q++ = *s++;
 1d4:	2a0d03e0 	mov	w0, w13
 1d8:	17fffff0 	b	198 <printf+0x198>
                u = va_arg(ap, unsigned long);
 1dc:	11002022 	add	w2, w1, #0x8
 1e0:	b9002be2 	str	w2, [sp, #40]
 1e4:	7100005f 	cmp	w2, #0x0
 1e8:	540000ad 	b.le	1fc <printf+0x1fc>
 1ec:	91003c01 	add	x1, x0, #0xf
 1f0:	927df021 	and	x1, x1, #0xfffffffffffffff8
 1f4:	f9000be1 	str	x1, [sp, #16]
 1f8:	1400002e 	b	2b0 <printf+0x2b0>
 1fc:	8b21c160 	add	x0, x11, w1, sxtw
 200:	1400002c 	b	2b0 <printf+0x2b0>
                    u /= 16;
 204:	aa0203e0 	mov	x0, x2
                    *s++ = xdigits[u % 16];
 208:	92400c02 	and	x2, x0, #0xf
 20c:	386268e2 	ldrb	w2, [x7, x2]
 210:	38001422 	strb	w2, [x1], #1
                    u /= 16;
 214:	d344fc02 	lsr	x2, x0, #4
                } while (u);
 218:	f1003c1f 	cmp	x0, #0xf
 21c:	54ffff48 	b.hi	204 <printf+0x204>  // b.pmore
                while (s > nbuf)  *q++ = *--s;
 220:	eb06003f 	cmp	x1, x6
 224:	540004c9 	b.ls	2bc <printf+0x2bc>  // b.plast
                    *s++ = xdigits[u % 16];
 228:	aa0103e0 	mov	x0, x1
                *q++ = 'x';
 22c:	aa0503e2 	mov	x2, x5
                while (s > nbuf)  *q++ = *--s;
 230:	385ffc03 	ldrb	w3, [x0, #-1]!
 234:	38001443 	strb	w3, [x2], #1
 238:	eb06001f 	cmp	x0, x6
 23c:	54ffffa1 	b.ne	230 <printf+0x230>  // b.any
 240:	cb060021 	sub	x1, x1, x6
 244:	8b0100a1 	add	x1, x5, x1
 248:	14000003 	b	254 <printf+0x254>
            default:
                /* fall-through */
                break;
            }
        } else {
            *q++ = *p;
 24c:	38001422 	strb	w2, [x1], #1
 250:	aa0003e4 	mov	x4, x0
    for (const char * p = fmt; *p; p++) {
 254:	91000480 	add	x0, x4, #0x1
 258:	39400482 	ldrb	w2, [x4, #1]
 25c:	34000382 	cbz	w2, 2cc <printf+0x2cc>
        if (*p == '%') {
 260:	7100945f 	cmp	w2, #0x25
 264:	54ffff41 	b.ne	24c <printf+0x24c>  // b.any
            switch (*++p) {
 268:	91000404 	add	x4, x0, #0x1
 26c:	39400400 	ldrb	w0, [x0, #1]
 270:	7101901f 	cmp	w0, #0x64
 274:	54fff300 	b.eq	d4 <printf+0xd4>  // b.none
 278:	54fff049 	b.ls	80 <printf+0x80>  // b.plast
 27c:	7101cc1f 	cmp	w0, #0x73
 280:	54fff780 	b.eq	170 <printf+0x170>  // b.none
 284:	7101e01f 	cmp	w0, #0x78
 288:	54fffe61 	b.ne	254 <printf+0x254>  // b.any
                *q++ = '0';
 28c:	aa0103e5 	mov	x5, x1
 290:	380024aa 	strb	w10, [x5], #2
                *q++ = 'x';
 294:	39000429 	strb	w9, [x1, #1]
                u = va_arg(ap, unsigned long);
 298:	b9402be1 	ldr	w1, [sp, #40]
 29c:	f9400be0 	ldr	x0, [sp, #16]
 2a0:	37fff9e1 	tbnz	w1, #31, 1dc <printf+0x1dc>
 2a4:	91003c01 	add	x1, x0, #0xf
 2a8:	927df021 	and	x1, x1, #0xfffffffffffffff8
 2ac:	f9000be1 	str	x1, [sp, #16]
 2b0:	f9400000 	ldr	x0, [x0]
                s = nbuf;
 2b4:	9100c3e1 	add	x1, sp, #0x30
 2b8:	17ffffd4 	b	208 <printf+0x208>
                *q++ = 'x';
 2bc:	aa0503e1 	mov	x1, x5
 2c0:	17ffffe5 	b	254 <printf+0x254>
    char * q = buf;
 2c4:	90000001 	adrp	x1, 0 <printf>
 2c8:	91000021 	add	x1, x1, #0x0
        }
    }
    *q = 0;
 2cc:	3900003f 	strb	wzr, [x1]

    con_puts(buf);
 2d0:	90000000 	adrp	x0, 0 <printf>
 2d4:	91000000 	add	x0, x0, #0x0
 2d8:	94000000 	bl	0 <con_puts>

    va_end(ap);
    return rc;
}
 2dc:	52800000 	mov	w0, #0x0                   	// #0
 2e0:	a8c97bfd 	ldp	x29, x30, [sp], #144
 2e4:	d65f03c0 	ret
