
lib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <printf>:

static const char xdigits[16] = { "0123456789abcdef" };

int
printf(const char * fmt, ...)
{
   0:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
   4:	910003fd 	mov	x29, sp
   8:	f9002fe1 	str	x1, [sp, #88]
   c:	f90033e2 	str	x2, [sp, #96]
  10:	f90037e3 	str	x3, [sp, #104]
  14:	f9003be4 	str	x4, [sp, #112]
  18:	f9003fe5 	str	x5, [sp, #120]
  1c:	f90043e6 	str	x6, [sp, #128]
  20:	f90047e7 	str	x7, [sp, #136]
    static char buf[1024];
    char nbuf[32];
    int rc;
    va_list ap;
    va_start(ap, fmt);
  24:	910243e1 	add	x1, sp, #0x90
  28:	f9000be1 	str	x1, [sp, #16]
  2c:	f9000fe1 	str	x1, [sp, #24]
  30:	910143e1 	add	x1, sp, #0x50
  34:	f90013e1 	str	x1, [sp, #32]
  38:	128006e1 	mov	w1, #0xffffffc8            	// #-56
  3c:	b9002be1 	str	w1, [sp, #40]
  40:	b9002fff 	str	wzr, [sp, #44]

    char * q = buf;
    for (const char * p = fmt; *p; p++) {
  44:	39400002 	ldrb	w2, [x0]
  48:	340013a2 	cbz	w2, 2bc <printf+0x2bc>
                while (*s)  *q++ = *s++;
                break;
            case 'x':
                *q++ = '0';
                *q++ = 'x';
                u = va_arg(ap, unsigned long);
  4c:	f9400feb 	ldr	x11, [sp, #24]
    char * q = buf;
  50:	90000001 	adrp	x1, 0 <printf>
  54:	91000021 	add	x1, x1, #0x0
                if (s == 0) s = "(null)";
  58:	9000000d 	adrp	x13, 0 <printf>
                while (*s)  *q++ = *s++;
  5c:	5280050c 	mov	w12, #0x28                  	// #40
                *q++ = '0';
  60:	5280060a 	mov	w10, #0x30                  	// #48
                *q++ = 'x';
  64:	52800f09 	mov	w9, #0x78                  	// #120
                s = nbuf;
                do {
                    *s++ = xdigits[u % 16];
  68:	90000007 	adrp	x7, 0 <printf>
  6c:	910000e7 	add	x7, x7, #0x0
                    u /= 16;
                } while (u);
                while (s > nbuf)  *q++ = *--s;
  70:	9100c3e6 	add	x6, sp, #0x30
                    *s++ = '0' + u % 10;
  74:	b202e7e8 	mov	x8, #0xcccccccccccccccc    	// #-3689348814741910324
  78:	f29999a8 	movk	x8, #0xcccd
  7c:	14000066 	b	214 <printf+0x214>
            switch (*++p) {
  80:	7101e01f 	cmp	w0, #0x78
  84:	54000c21 	b.ne	208 <printf+0x208>  // b.any
                *q++ = '0';
  88:	aa0103e5 	mov	x5, x1
  8c:	380024aa 	strb	w10, [x5], #2
                *q++ = 'x';
  90:	39000429 	strb	w9, [x1, #1]
                u = va_arg(ap, unsigned long);
  94:	b9402be1 	ldr	w1, [sp, #40]
  98:	f9400be0 	ldr	x0, [sp, #16]
  9c:	37f809e1 	tbnz	w1, #31, 1d8 <printf+0x1d8>
  a0:	91003c01 	add	x1, x0, #0xf
  a4:	927df021 	and	x1, x1, #0xfffffffffffffff8
  a8:	f9000be1 	str	x1, [sp, #16]
  ac:	f9400000 	ldr	x0, [x0]
                s = nbuf;
  b0:	9100c3e1 	add	x1, sp, #0x30
                    *s++ = xdigits[u % 16];
  b4:	92400c02 	and	x2, x0, #0xf
  b8:	386268e2 	ldrb	w2, [x7, x2]
  bc:	38001422 	strb	w2, [x1], #1
                } while (u);
  c0:	f1003c1f 	cmp	x0, #0xf
  c4:	d344fc00 	lsr	x0, x0, #4
  c8:	54ffff68 	b.hi	b4 <printf+0xb4>  // b.pmore
                while (s > nbuf)  *q++ = *--s;
  cc:	eb06003f 	cmp	x1, x6
  d0:	54000f29 	b.ls	2b4 <printf+0x2b4>  // b.plast
                    *s++ = xdigits[u % 16];
  d4:	aa0103e0 	mov	x0, x1
                *q++ = 'x';
  d8:	aa0503e2 	mov	x2, x5
                while (s > nbuf)  *q++ = *--s;
  dc:	385ffc03 	ldrb	w3, [x0, #-1]!
  e0:	38001443 	strb	w3, [x2], #1
  e4:	eb06001f 	cmp	x0, x6
  e8:	54ffffa1 	b.ne	dc <printf+0xdc>  // b.any
  ec:	cb060021 	sub	x1, x1, x6
  f0:	8b0100a1 	add	x1, x5, x1
  f4:	14000045 	b	208 <printf+0x208>
                u = va_arg(ap, int);
  f8:	b9402be2 	ldr	w2, [sp, #40]
  fc:	f9400be0 	ldr	x0, [sp, #16]
 100:	37f800e2 	tbnz	w2, #31, 11c <printf+0x11c>
 104:	91002c02 	add	x2, x0, #0xb
 108:	927df042 	and	x2, x2, #0xfffffffffffffff8
 10c:	f9000be2 	str	x2, [sp, #16]
 110:	b9800000 	ldrsw	x0, [x0]
                *q++ = u;
 114:	38001420 	strb	w0, [x1], #1
                break;
 118:	1400003c 	b	208 <printf+0x208>
                u = va_arg(ap, int);
 11c:	11002043 	add	w3, w2, #0x8
 120:	b9002be3 	str	w3, [sp, #40]
 124:	7100007f 	cmp	w3, #0x0
 128:	540000ad 	b.le	13c <printf+0x13c>
 12c:	91002c02 	add	x2, x0, #0xb
 130:	927df042 	and	x2, x2, #0xfffffffffffffff8
 134:	f9000be2 	str	x2, [sp, #16]
 138:	17fffff6 	b	110 <printf+0x110>
 13c:	8b22c160 	add	x0, x11, w2, sxtw
 140:	17fffff4 	b	110 <printf+0x110>
                u = va_arg(ap, int);
 144:	11002043 	add	w3, w2, #0x8
 148:	b9002be3 	str	w3, [sp, #40]
 14c:	7100007f 	cmp	w3, #0x0
 150:	540000ad 	b.le	164 <printf+0x164>
 154:	91002c02 	add	x2, x0, #0xb
 158:	927df042 	and	x2, x2, #0xfffffffffffffff8
 15c:	f9000be2 	str	x2, [sp, #16]
 160:	1400003e 	b	258 <printf+0x258>
 164:	8b22c160 	add	x0, x11, w2, sxtw
 168:	1400003c 	b	258 <printf+0x258>
                s = va_arg(ap, char *);
 16c:	b9402be2 	ldr	w2, [sp, #40]
 170:	f9400be0 	ldr	x0, [sp, #16]
 174:	37f80182 	tbnz	w2, #31, 1a4 <printf+0x1a4>
 178:	91003c02 	add	x2, x0, #0xf
 17c:	927df042 	and	x2, x2, #0xfffffffffffffff8
 180:	f9000be2 	str	x2, [sp, #16]
 184:	f9400002 	ldr	x2, [x0]
                if (s == 0) s = "(null)";
 188:	b4000222 	cbz	x2, 1cc <printf+0x1cc>
                while (*s)  *q++ = *s++;
 18c:	39400040 	ldrb	w0, [x2]
 190:	340003c0 	cbz	w0, 208 <printf+0x208>
 194:	38001420 	strb	w0, [x1], #1
 198:	38401c40 	ldrb	w0, [x2, #1]!
 19c:	35ffffc0 	cbnz	w0, 194 <printf+0x194>
 1a0:	1400001a 	b	208 <printf+0x208>
                s = va_arg(ap, char *);
 1a4:	11002043 	add	w3, w2, #0x8
 1a8:	b9002be3 	str	w3, [sp, #40]
 1ac:	7100007f 	cmp	w3, #0x0
 1b0:	540000ad 	b.le	1c4 <printf+0x1c4>
 1b4:	91003c02 	add	x2, x0, #0xf
 1b8:	927df042 	and	x2, x2, #0xfffffffffffffff8
 1bc:	f9000be2 	str	x2, [sp, #16]
 1c0:	17fffff1 	b	184 <printf+0x184>
 1c4:	8b22c160 	add	x0, x11, w2, sxtw
 1c8:	17ffffef 	b	184 <printf+0x184>
                if (s == 0) s = "(null)";
 1cc:	910001a2 	add	x2, x13, #0x0
                while (*s)  *q++ = *s++;
 1d0:	2a0c03e0 	mov	w0, w12
 1d4:	17fffff0 	b	194 <printf+0x194>
                u = va_arg(ap, unsigned long);
 1d8:	11002022 	add	w2, w1, #0x8
 1dc:	b9002be2 	str	w2, [sp, #40]
 1e0:	7100005f 	cmp	w2, #0x0
 1e4:	540000ad 	b.le	1f8 <printf+0x1f8>
 1e8:	91003c01 	add	x1, x0, #0xf
 1ec:	927df021 	and	x1, x1, #0xfffffffffffffff8
 1f0:	f9000be1 	str	x1, [sp, #16]
 1f4:	17ffffae 	b	ac <printf+0xac>
 1f8:	8b21c160 	add	x0, x11, w1, sxtw
 1fc:	17ffffac 	b	ac <printf+0xac>
            default:
                /* fall-through */
                break;
            }
        } else {
            *q++ = *p;
 200:	38001422 	strb	w2, [x1], #1
 204:	aa0003e4 	mov	x4, x0
    for (const char * p = fmt; *p; p++) {
 208:	91000480 	add	x0, x4, #0x1
 20c:	39400482 	ldrb	w2, [x4, #1]
 210:	340005a2 	cbz	w2, 2c4 <printf+0x2c4>
        if (*p == '%') {
 214:	7100945f 	cmp	w2, #0x25
 218:	54ffff41 	b.ne	200 <printf+0x200>  // b.any
            switch (*++p) {
 21c:	91000404 	add	x4, x0, #0x1
 220:	39400400 	ldrb	w0, [x0, #1]
 224:	7101cc1f 	cmp	w0, #0x73
 228:	54fffa20 	b.eq	16c <printf+0x16c>  // b.none
 22c:	54fff2a8 	b.hi	80 <printf+0x80>  // b.pmore
 230:	71018c1f 	cmp	w0, #0x63
 234:	54fff620 	b.eq	f8 <printf+0xf8>  // b.none
 238:	7101901f 	cmp	w0, #0x64
 23c:	54fffe61 	b.ne	208 <printf+0x208>  // b.any
                u = va_arg(ap, int);
 240:	b9402be2 	ldr	w2, [sp, #40]
 244:	f9400be0 	ldr	x0, [sp, #16]
 248:	37fff7e2 	tbnz	w2, #31, 144 <printf+0x144>
 24c:	91002c02 	add	x2, x0, #0xb
 250:	927df042 	and	x2, x2, #0xfffffffffffffff8
 254:	f9000be2 	str	x2, [sp, #16]
 258:	b9800003 	ldrsw	x3, [x0]
                s = nbuf;
 25c:	9100c3e5 	add	x5, sp, #0x30
                    *s++ = '0' + u % 10;
 260:	9bc87c60 	umulh	x0, x3, x8
 264:	d343fc00 	lsr	x0, x0, #3
 268:	8b000802 	add	x2, x0, x0, lsl #2
 26c:	cb020462 	sub	x2, x3, x2, lsl #1
 270:	1100c042 	add	w2, w2, #0x30
 274:	380014a2 	strb	w2, [x5], #1
                    u /= 10;
 278:	aa0303e2 	mov	x2, x3
 27c:	aa0003e3 	mov	x3, x0
                } while (u);
 280:	f100245f 	cmp	x2, #0x9
 284:	54fffee8 	b.hi	260 <printf+0x260>  // b.pmore
                while (s > nbuf)  *q++ = *--s;
 288:	eb0600bf 	cmp	x5, x6
 28c:	54fffbe9 	b.ls	208 <printf+0x208>  // b.plast
                    *s++ = '0' + u % 10;
 290:	aa0503e0 	mov	x0, x5
                while (s > nbuf)  *q++ = *--s;
 294:	aa0103e2 	mov	x2, x1
 298:	385ffc03 	ldrb	w3, [x0, #-1]!
 29c:	38001443 	strb	w3, [x2], #1
 2a0:	eb06001f 	cmp	x0, x6
 2a4:	54ffffa1 	b.ne	298 <printf+0x298>  // b.any
 2a8:	cb0600a5 	sub	x5, x5, x6
 2ac:	8b050021 	add	x1, x1, x5
 2b0:	17ffffd6 	b	208 <printf+0x208>
                *q++ = 'x';
 2b4:	aa0503e1 	mov	x1, x5
 2b8:	17ffffd4 	b	208 <printf+0x208>
    char * q = buf;
 2bc:	90000001 	adrp	x1, 0 <printf>
 2c0:	91000021 	add	x1, x1, #0x0
        }
    }
    *q = 0;
 2c4:	3900003f 	strb	wzr, [x1]

    con_puts(buf);
 2c8:	90000000 	adrp	x0, 0 <printf>
 2cc:	91000000 	add	x0, x0, #0x0
 2d0:	94000000 	bl	0 <con_puts>

    va_end(ap);
    return rc;
}
 2d4:	52800000 	mov	w0, #0x0                   	// #0
 2d8:	a8c97bfd 	ldp	x29, x30, [sp], #144
 2dc:	d65f03c0 	ret
