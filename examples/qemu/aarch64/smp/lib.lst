
lib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_vsprintf>:
 * _vsprintf() returns a count of the printable characters,
 * but requires buf to be one character larger
 */
static int
_vsprintf(char * buf, const char * fmt, va_list ap)
{
   0:	f9400049 	ldr	x9, [x2]
   4:	f940044e 	ldr	x14, [x2, #8]
   8:	b940184b 	ldr	w11, [x2, #24]
    char fill = ' ';
    int mode = 0;           // state: 0 = normal, 1 = building format
    int b64 = 0;

    char * q = buf;
    for (const char * p = fmt; *p; p++) {
   c:	39400022 	ldrb	w2, [x1]
  10:	340019a2 	cbz	w2, 344 <_vsprintf+0x344>
{
  14:	d10083ff 	sub	sp, sp, #0x20
    char * q = buf;
  18:	aa0003e3 	mov	x3, x0
    int b64 = 0;
  1c:	52800005 	mov	w5, #0x0                   	// #0
    int mode = 0;           // state: 0 = normal, 1 = building format
  20:	52800004 	mov	w4, #0x0                   	// #0
                fill = '0';
                break;
            }
        } else {
            if (*p == '%') {
                mode = 1;
  24:	5280002d 	mov	w13, #0x1                   	// #1
                mode = b64 = 0;
  28:	5280000c 	mov	w12, #0x0                   	// #0
                if (s == 0) s = "(null)";
  2c:	90000010 	adrp	x16, 0 <_vsprintf>
                while (*s)  *q++ = *s++;
  30:	5280050f 	mov	w15, #0x28                  	// #40
                    *s++ = xdigits[u % 16];
  34:	90000008 	adrp	x8, 0 <_vsprintf>
  38:	91000108 	add	x8, x8, #0x0
                while (s > nbuf)  *q++ = *--s;
  3c:	910003e7 	mov	x7, sp
                    *s++ = '0' + u % 10;
  40:	b202e7ea 	mov	x10, #0xcccccccccccccccc    	// #-3689348814741910324
  44:	f29999aa 	movk	x10, #0xcccd
  48:	14000090 	b	288 <_vsprintf+0x288>
            switch (*p) {
  4c:	71018c5f 	cmp	w2, #0x63
  50:	54000420 	b.eq	d4 <_vsprintf+0xd4>  // b.none
  54:	7101905f 	cmp	w2, #0x64
  58:	54001141 	b.ne	280 <_vsprintf+0x280>  // b.any
                u = b64 ? va_arg(ap, u64) : va_arg(ap, int);
  5c:	340007a5 	cbz	w5, 150 <_vsprintf+0x150>
  60:	37f8062b 	tbnz	w11, #31, 124 <_vsprintf+0x124>
  64:	91003d24 	add	x4, x9, #0xf
  68:	aa0903e2 	mov	x2, x9
  6c:	927df089 	and	x9, x4, #0xfffffffffffffff8
  70:	f9400045 	ldr	x5, [x2]
  74:	910003e6 	mov	x6, sp
                    *s++ = '0' + u % 10;
  78:	9bca7ca2 	umulh	x2, x5, x10
  7c:	d343fc42 	lsr	x2, x2, #3
  80:	8b020844 	add	x4, x2, x2, lsl #2
  84:	cb0404a4 	sub	x4, x5, x4, lsl #1
  88:	1100c084 	add	w4, w4, #0x30
  8c:	380014c4 	strb	w4, [x6], #1
                    u /= 10;
  90:	aa0503e4 	mov	x4, x5
  94:	aa0203e5 	mov	x5, x2
                } while (u);
  98:	f100249f 	cmp	x4, #0x9
  9c:	54fffee8 	b.hi	78 <_vsprintf+0x78>  // b.pmore
                while (s > nbuf)  *q++ = *--s;
  a0:	eb0700df 	cmp	x6, x7
  a4:	540013a9 	b.ls	318 <_vsprintf+0x318>  // b.plast
                    *s++ = '0' + u % 10;
  a8:	aa0603e2 	mov	x2, x6
                while (s > nbuf)  *q++ = *--s;
  ac:	aa0303e4 	mov	x4, x3
  b0:	385ffc45 	ldrb	w5, [x2, #-1]!
  b4:	38001485 	strb	w5, [x4], #1
  b8:	eb07005f 	cmp	x2, x7
  bc:	54ffffa1 	b.ne	b0 <_vsprintf+0xb0>  // b.any
  c0:	cb0700c6 	sub	x6, x6, x7
  c4:	8b060063 	add	x3, x3, x6
                mode = b64 = 0;
  c8:	2a0c03e5 	mov	w5, w12
  cc:	2a0c03e4 	mov	w4, w12
  d0:	1400006c 	b	280 <_vsprintf+0x280>
                u = va_arg(ap, int);
  d4:	37f8012b 	tbnz	w11, #31, f8 <_vsprintf+0xf8>
  d8:	91002d24 	add	x4, x9, #0xb
  dc:	aa0903e2 	mov	x2, x9
  e0:	927df089 	and	x9, x4, #0xfffffffffffffff8
  e4:	b9800042 	ldrsw	x2, [x2]
                *q++ = u;
  e8:	38001462 	strb	w2, [x3], #1
                mode = b64 = 0;
  ec:	2a0c03e5 	mov	w5, w12
  f0:	2a0c03e4 	mov	w4, w12
                break;
  f4:	14000063 	b	280 <_vsprintf+0x280>
                u = va_arg(ap, int);
  f8:	11002164 	add	w4, w11, #0x8
  fc:	7100009f 	cmp	w4, #0x0
 100:	540000cd 	b.le	118 <_vsprintf+0x118>
 104:	91002d25 	add	x5, x9, #0xb
 108:	2a0403eb 	mov	w11, w4
 10c:	aa0903e2 	mov	x2, x9
 110:	927df0a9 	and	x9, x5, #0xfffffffffffffff8
 114:	17fffff4 	b	e4 <_vsprintf+0xe4>
 118:	8b2bc1c2 	add	x2, x14, w11, sxtw
 11c:	2a0403eb 	mov	w11, w4
 120:	17fffff1 	b	e4 <_vsprintf+0xe4>
                u = b64 ? va_arg(ap, u64) : va_arg(ap, int);
 124:	11002164 	add	w4, w11, #0x8
 128:	7100009f 	cmp	w4, #0x0
 12c:	540000cd 	b.le	144 <_vsprintf+0x144>
 130:	91003d25 	add	x5, x9, #0xf
 134:	2a0403eb 	mov	w11, w4
 138:	aa0903e2 	mov	x2, x9
 13c:	927df0a9 	and	x9, x5, #0xfffffffffffffff8
 140:	17ffffcc 	b	70 <_vsprintf+0x70>
 144:	8b2bc1c2 	add	x2, x14, w11, sxtw
 148:	2a0403eb 	mov	w11, w4
 14c:	17ffffc9 	b	70 <_vsprintf+0x70>
 150:	37f800cb 	tbnz	w11, #31, 168 <_vsprintf+0x168>
 154:	91002d24 	add	x4, x9, #0xb
 158:	aa0903e2 	mov	x2, x9
 15c:	927df089 	and	x9, x4, #0xfffffffffffffff8
 160:	b9800045 	ldrsw	x5, [x2]
 164:	17ffffc4 	b	74 <_vsprintf+0x74>
 168:	11002164 	add	w4, w11, #0x8
 16c:	7100009f 	cmp	w4, #0x0
 170:	540000cd 	b.le	188 <_vsprintf+0x188>
 174:	91002d25 	add	x5, x9, #0xb
 178:	2a0403eb 	mov	w11, w4
 17c:	aa0903e2 	mov	x2, x9
 180:	927df0a9 	and	x9, x5, #0xfffffffffffffff8
 184:	17fffff7 	b	160 <_vsprintf+0x160>
 188:	8b2bc1c2 	add	x2, x14, w11, sxtw
 18c:	2a0403eb 	mov	w11, w4
 190:	17fffff4 	b	160 <_vsprintf+0x160>
                s = va_arg(ap, char *);
 194:	37f801cb 	tbnz	w11, #31, 1cc <_vsprintf+0x1cc>
 198:	91003d24 	add	x4, x9, #0xf
 19c:	aa0903e2 	mov	x2, x9
 1a0:	927df089 	and	x9, x4, #0xfffffffffffffff8
 1a4:	f9400044 	ldr	x4, [x2]
                if (s == 0) s = "(null)";
 1a8:	b4000284 	cbz	x4, 1f8 <_vsprintf+0x1f8>
                while (*s)  *q++ = *s++;
 1ac:	39400082 	ldrb	w2, [x4]
 1b0:	34000ba2 	cbz	w2, 324 <_vsprintf+0x324>
 1b4:	38001462 	strb	w2, [x3], #1
 1b8:	38401c82 	ldrb	w2, [x4, #1]!
 1bc:	35ffffc2 	cbnz	w2, 1b4 <_vsprintf+0x1b4>
                mode = b64 = 0;
 1c0:	2a0c03e5 	mov	w5, w12
 1c4:	2a0c03e4 	mov	w4, w12
 1c8:	1400002e 	b	280 <_vsprintf+0x280>
                s = va_arg(ap, char *);
 1cc:	11002164 	add	w4, w11, #0x8
 1d0:	7100009f 	cmp	w4, #0x0
 1d4:	540000cd 	b.le	1ec <_vsprintf+0x1ec>
 1d8:	91003d25 	add	x5, x9, #0xf
 1dc:	2a0403eb 	mov	w11, w4
 1e0:	aa0903e2 	mov	x2, x9
 1e4:	927df0a9 	and	x9, x5, #0xfffffffffffffff8
 1e8:	17ffffef 	b	1a4 <_vsprintf+0x1a4>
 1ec:	8b2bc1c2 	add	x2, x14, w11, sxtw
 1f0:	2a0403eb 	mov	w11, w4
 1f4:	17ffffec 	b	1a4 <_vsprintf+0x1a4>
                if (s == 0) s = "(null)";
 1f8:	91000204 	add	x4, x16, #0x0
                while (*s)  *q++ = *s++;
 1fc:	2a0f03e2 	mov	w2, w15
 200:	17ffffed 	b	1b4 <_vsprintf+0x1b4>
                u = b64 ? va_arg(ap, u64) : va_arg(ap, u32);
 204:	11002164 	add	w4, w11, #0x8
 208:	7100009f 	cmp	w4, #0x0
 20c:	540000cd 	b.le	224 <_vsprintf+0x224>
 210:	91003d25 	add	x5, x9, #0xf
 214:	2a0403eb 	mov	w11, w4
 218:	aa0903e2 	mov	x2, x9
 21c:	927df0a9 	and	x9, x5, #0xfffffffffffffff8
 220:	14000027 	b	2bc <_vsprintf+0x2bc>
 224:	8b2bc1c2 	add	x2, x14, w11, sxtw
 228:	2a0403eb 	mov	w11, w4
 22c:	14000024 	b	2bc <_vsprintf+0x2bc>
 230:	37f800cb 	tbnz	w11, #31, 248 <_vsprintf+0x248>
 234:	91002d24 	add	x4, x9, #0xb
 238:	aa0903e2 	mov	x2, x9
 23c:	927df089 	and	x9, x4, #0xfffffffffffffff8
 240:	b9400042 	ldr	w2, [x2]
 244:	1400001f 	b	2c0 <_vsprintf+0x2c0>
 248:	11002164 	add	w4, w11, #0x8
 24c:	7100009f 	cmp	w4, #0x0
 250:	540000cd 	b.le	268 <_vsprintf+0x268>
 254:	91002d25 	add	x5, x9, #0xb
 258:	2a0403eb 	mov	w11, w4
 25c:	aa0903e2 	mov	x2, x9
 260:	927df0a9 	and	x9, x5, #0xfffffffffffffff8
 264:	17fffff7 	b	240 <_vsprintf+0x240>
 268:	8b2bc1c2 	add	x2, x14, w11, sxtw
 26c:	2a0403eb 	mov	w11, w4
 270:	17fffff4 	b	240 <_vsprintf+0x240>
            if (*p == '%') {
 274:	7100945f 	cmp	w2, #0x25
 278:	54000620 	b.eq	33c <_vsprintf+0x33c>  // b.none
            } else {
                *q++ = *p;
 27c:	38001462 	strb	w2, [x3], #1
    for (const char * p = fmt; *p; p++) {
 280:	38401c22 	ldrb	w2, [x1, #1]!
 284:	34000662 	cbz	w2, 350 <_vsprintf+0x350>
        if (mode) {
 288:	34ffff64 	cbz	w4, 274 <_vsprintf+0x274>
            switch (*p) {
 28c:	7101b05f 	cmp	w2, #0x6c
 290:	54000400 	b.eq	310 <_vsprintf+0x310>  // b.none
 294:	54ffedc9 	b.ls	4c <_vsprintf+0x4c>  // b.plast
 298:	7101cc5f 	cmp	w2, #0x73
 29c:	54fff7c0 	b.eq	194 <_vsprintf+0x194>  // b.none
 2a0:	7101e05f 	cmp	w2, #0x78
 2a4:	54fffee1 	b.ne	280 <_vsprintf+0x280>  // b.any
                u = b64 ? va_arg(ap, u64) : va_arg(ap, u32);
 2a8:	34fffc45 	cbz	w5, 230 <_vsprintf+0x230>
 2ac:	37fffacb 	tbnz	w11, #31, 204 <_vsprintf+0x204>
 2b0:	91003d24 	add	x4, x9, #0xf
 2b4:	aa0903e2 	mov	x2, x9
 2b8:	927df089 	and	x9, x4, #0xfffffffffffffff8
 2bc:	f9400042 	ldr	x2, [x2]
 2c0:	910003e5 	mov	x5, sp
                    *s++ = xdigits[u % 16];
 2c4:	92400c44 	and	x4, x2, #0xf
 2c8:	38646904 	ldrb	w4, [x8, x4]
 2cc:	380014a4 	strb	w4, [x5], #1
                } while (u);
 2d0:	f1003c5f 	cmp	x2, #0xf
 2d4:	d344fc42 	lsr	x2, x2, #4
 2d8:	54ffff68 	b.hi	2c4 <_vsprintf+0x2c4>  // b.pmore
                while (s > nbuf)  *q++ = *--s;
 2dc:	eb0700bf 	cmp	x5, x7
 2e0:	54000289 	b.ls	330 <_vsprintf+0x330>  // b.plast
                    *s++ = xdigits[u % 16];
 2e4:	aa0503e2 	mov	x2, x5
                while (s > nbuf)  *q++ = *--s;
 2e8:	aa0303e4 	mov	x4, x3
 2ec:	385ffc46 	ldrb	w6, [x2, #-1]!
 2f0:	38001486 	strb	w6, [x4], #1
 2f4:	eb07005f 	cmp	x2, x7
 2f8:	54ffffa1 	b.ne	2ec <_vsprintf+0x2ec>  // b.any
 2fc:	cb0700a5 	sub	x5, x5, x7
 300:	8b050063 	add	x3, x3, x5
                mode = b64 = 0;
 304:	2a0c03e5 	mov	w5, w12
 308:	2a0c03e4 	mov	w4, w12
 30c:	17ffffdd 	b	280 <_vsprintf+0x280>
            switch (*p) {
 310:	2a0403e5 	mov	w5, w4
 314:	17ffffdb 	b	280 <_vsprintf+0x280>
                mode = b64 = 0;
 318:	2a0c03e5 	mov	w5, w12
 31c:	2a0c03e4 	mov	w4, w12
 320:	17ffffd8 	b	280 <_vsprintf+0x280>
                mode = b64 = 0;
 324:	2a0c03e5 	mov	w5, w12
 328:	2a0c03e4 	mov	w4, w12
 32c:	17ffffd5 	b	280 <_vsprintf+0x280>
                mode = b64 = 0;
 330:	2a0c03e5 	mov	w5, w12
 334:	2a0c03e4 	mov	w4, w12
 338:	17ffffd2 	b	280 <_vsprintf+0x280>
                mode = 1;
 33c:	2a0d03e4 	mov	w4, w13
 340:	17ffffd0 	b	280 <_vsprintf+0x280>
            }
        }
    }
    *q = 0;     // don't include the null delimiter in the count ...
 344:	3900001f 	strb	wzr, [x0]

    return q - buf;
}
 348:	4b000000 	sub	w0, w0, w0
 34c:	d65f03c0 	ret
    *q = 0;     // don't include the null delimiter in the count ...
 350:	3900007f 	strb	wzr, [x3]
}
 354:	4b000060 	sub	w0, w3, w0
 358:	910083ff 	add	sp, sp, #0x20
 35c:	d65f03c0 	ret

0000000000000360 <puts>:
{
 360:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
 364:	910003fd 	mov	x29, sp
 368:	a90153f3 	stp	x19, x20, [sp, #16]
 36c:	f90013f5 	str	x21, [sp, #32]
 370:	aa0003f4 	mov	x20, x0
    wait_for_token(con_puts, token);
 374:	90000001 	adrp	x1, 0 <_vsprintf>
 378:	91000021 	add	x1, x1, #0x0
 37c:	91010021 	add	x1, x1, #0x40
 380:	885f7c22 	ldxr	w2, [x1]
 384:	11000440 	add	w0, w2, #0x1
 388:	8803fc20 	stlxr	w3, w0, [x1]
 38c:	35ffffa3 	cbnz	w3, 380 <puts+0x20>
 390:	d5033bbf 	dmb	ish
 394:	12000853 	and	w19, w2, #0x7
 398:	90000003 	adrp	x3, 0 <_vsprintf>
 39c:	91000063 	add	x3, x3, #0x0
 3a0:	92400842 	and	x2, x2, #0x7
 3a4:	f8627861 	ldr	x1, [x3, x2, lsl #3]
 3a8:	b4ffffe1 	cbz	x1, 3a4 <puts+0x44>
 3ac:	90000015 	adrp	x21, 0 <_vsprintf>
 3b0:	910002b5 	add	x21, x21, #0x0
 3b4:	93407e60 	sxtw	x0, w19
 3b8:	f8207abf 	str	xzr, [x21, x0, lsl #3]

static inline u64
armv8_get_tp(void)
{
    u64 tp;
    asm volatile("mrs %0, tpidr_el0" : "=r" (tp) : : );
 3bc:	d53bd040 	mrs	x0, tpidr_el0
        cb[0] = '0' + cpu_id();
 3c0:	f9400400 	ldr	x0, [x0, #8]
 3c4:	1100c000 	add	w0, w0, #0x30
 3c8:	3900e3e0 	strb	w0, [sp, #56]
        cb[1] = ' ';
 3cc:	52800400 	mov	w0, #0x20                  	// #32
 3d0:	3900e7e0 	strb	w0, [sp, #57]
        cb[2] = '\0';
 3d4:	3900ebff 	strb	wzr, [sp, #58]
        con_puts(cb);
 3d8:	9100e3e0 	add	x0, sp, #0x38
 3dc:	94000000 	bl	0 <con_puts>
    con_puts(buf);
 3e0:	aa1403e0 	mov	x0, x20
 3e4:	94000000 	bl	0 <con_puts>
    wait_for_token(con_puts, token);
 3e8:	11000673 	add	w19, w19, #0x1
    return_token(con_puts, token);
 3ec:	92400a73 	and	x19, x19, #0x7
 3f0:	d2800020 	mov	x0, #0x1                   	// #1
 3f4:	f8337aa0 	str	x0, [x21, x19, lsl #3]
}
 3f8:	a94153f3 	ldp	x19, x20, [sp, #16]
 3fc:	f94013f5 	ldr	x21, [sp, #32]
 400:	a8c47bfd 	ldp	x29, x30, [sp], #64
 404:	d65f03c0 	ret

0000000000000408 <sprintf>:

int
sprintf(char * buf, const char * fmt, ...)
{
 408:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
 40c:	910003fd 	mov	x29, sp
 410:	f9002be2 	str	x2, [sp, #80]
 414:	f9002fe3 	str	x3, [sp, #88]
 418:	f90033e4 	str	x4, [sp, #96]
 41c:	f90037e5 	str	x5, [sp, #104]
 420:	f9003be6 	str	x6, [sp, #112]
 424:	f9003fe7 	str	x7, [sp, #120]
    int rc;
    va_list ap;
    va_start(ap, fmt);
 428:	910203e2 	add	x2, sp, #0x80
 42c:	f9001be2 	str	x2, [sp, #48]
 430:	f9001fe2 	str	x2, [sp, #56]
 434:	910143e2 	add	x2, sp, #0x50
 438:	f90023e2 	str	x2, [sp, #64]
 43c:	128005e2 	mov	w2, #0xffffffd0            	// #-48
 440:	b9004be2 	str	w2, [sp, #72]
 444:	b9004fff 	str	wzr, [sp, #76]

    rc = _vsprintf(buf, fmt, ap);
 448:	a9430fe2 	ldp	x2, x3, [sp, #48]
 44c:	a9010fe2 	stp	x2, x3, [sp, #16]
 450:	a9440fe2 	ldp	x2, x3, [sp, #64]
 454:	a9020fe2 	stp	x2, x3, [sp, #32]
 458:	910043e2 	add	x2, sp, #0x10
 45c:	97fffee9 	bl	0 <_vsprintf>

    va_end(ap);
    return rc;
}
 460:	a8c87bfd 	ldp	x29, x30, [sp], #128
 464:	d65f03c0 	ret

0000000000000468 <printf>:

int
printf(const char * fmt, ...)
{
 468:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
 46c:	910003fd 	mov	x29, sp
 470:	a90153f3 	stp	x19, x20, [sp, #16]
 474:	f90037e1 	str	x1, [sp, #104]
 478:	f9003be2 	str	x2, [sp, #112]
 47c:	f9003fe3 	str	x3, [sp, #120]
 480:	f90043e4 	str	x4, [sp, #128]
 484:	f90047e5 	str	x5, [sp, #136]
 488:	f9004be6 	str	x6, [sp, #144]
 48c:	f9004fe7 	str	x7, [sp, #152]
 490:	d53bd053 	mrs	x19, tpidr_el0
    struct thread * th = get_thread_data();
    int rc;
    va_list ap;
    va_start(ap, fmt);
 494:	910283e1 	add	x1, sp, #0xa0
 498:	f90023e1 	str	x1, [sp, #64]
 49c:	f90027e1 	str	x1, [sp, #72]
 4a0:	910183e1 	add	x1, sp, #0x60
 4a4:	f9002be1 	str	x1, [sp, #80]
 4a8:	128006e1 	mov	w1, #0xffffffc8            	// #-56
 4ac:	b9005be1 	str	w1, [sp, #88]
 4b0:	b9005fff 	str	wzr, [sp, #92]

    rc = _vsprintf(th->print_buf, fmt, ap);
 4b4:	91020273 	add	x19, x19, #0x80
 4b8:	a9440fe2 	ldp	x2, x3, [sp, #64]
 4bc:	a9020fe2 	stp	x2, x3, [sp, #32]
 4c0:	a9450fe2 	ldp	x2, x3, [sp, #80]
 4c4:	a9030fe2 	stp	x2, x3, [sp, #48]
 4c8:	910083e2 	add	x2, sp, #0x20
 4cc:	aa0003e1 	mov	x1, x0
 4d0:	aa1303e0 	mov	x0, x19
 4d4:	97fffecb 	bl	0 <_vsprintf>
 4d8:	2a0003f4 	mov	w20, w0

    puts(th->print_buf);
 4dc:	aa1303e0 	mov	x0, x19
 4e0:	94000000 	bl	360 <puts>

    va_end(ap);
    return rc;
}
 4e4:	2a1403e0 	mov	w0, w20
 4e8:	a94153f3 	ldp	x19, x20, [sp, #16]
 4ec:	a8ca7bfd 	ldp	x29, x30, [sp], #160
 4f0:	d65f03c0 	ret

00000000000004f4 <strlen>:

long
strlen(const char * s)
{
    int i = 0;
    while (s[i]) i++;
 4f4:	39400001 	ldrb	w1, [x0]
 4f8:	34000121 	cbz	w1, 51c <strlen+0x28>
 4fc:	d2800021 	mov	x1, #0x1                   	// #1
 500:	d1000403 	sub	x3, x0, #0x1
 504:	2a0103e0 	mov	w0, w1
 508:	91000421 	add	x1, x1, #0x1
 50c:	38616862 	ldrb	w2, [x3, x1]
 510:	35ffffa2 	cbnz	w2, 504 <strlen+0x10>
    return i;
}
 514:	93407c00 	sxtw	x0, w0
 518:	d65f03c0 	ret
    int i = 0;
 51c:	52800000 	mov	w0, #0x0                   	// #0
 520:	17fffffd 	b	514 <strlen+0x20>

0000000000000524 <strcpy>:

char *
strcpy(char * dst, const char * src)
{
    while (*src)
 524:	39400022 	ldrb	w2, [x1]
 528:	34000082 	cbz	w2, 538 <strcpy+0x14>
        *dst++ = *src++;
 52c:	38001402 	strb	w2, [x0], #1
    while (*src)
 530:	38401c22 	ldrb	w2, [x1, #1]!
 534:	35ffffc2 	cbnz	w2, 52c <strcpy+0x8>
    *dst = 0;
 538:	3900001f 	strb	wzr, [x0]
}
 53c:	d65f03c0 	ret

0000000000000540 <strcmp>:

int
strcmp(const char * s1, const char * s2)
{
    while (*s1  &&  *s2) {
 540:	39400002 	ldrb	w2, [x0]
 544:	34000102 	cbz	w2, 564 <strcmp+0x24>
 548:	39400023 	ldrb	w3, [x1]
        if (*s1 != *s2)
 54c:	7100007f 	cmp	w3, #0x0
 550:	7a421060 	ccmp	w3, w2, #0x0, ne  // ne = any
 554:	54000081 	b.ne	564 <strcmp+0x24>  // b.any
            break;
        s1++;
        s2++;
 558:	91000421 	add	x1, x1, #0x1
    while (*s1  &&  *s2) {
 55c:	38401c02 	ldrb	w2, [x0, #1]!
 560:	35ffff42 	cbnz	w2, 548 <strcmp+0x8>
    }
    return *s2 - *s1;
 564:	39400020 	ldrb	w0, [x1]
}
 568:	4b020000 	sub	w0, w0, w2
 56c:	d65f03c0 	ret

0000000000000570 <memset>:

void *
memset(void * s, int c, unsigned long n)
{
    u8 * d = s;
    while (n-- > 0)
 570:	b40000c2 	cbz	x2, 588 <memset+0x18>
 574:	8b020003 	add	x3, x0, x2
    u8 * d = s;
 578:	aa0003e2 	mov	x2, x0
        *d++ = c;
 57c:	38001441 	strb	w1, [x2], #1
    while (n-- > 0)
 580:	eb02007f 	cmp	x3, x2
 584:	54ffffc1 	b.ne	57c <memset+0xc>  // b.any
    return s;
}
 588:	d65f03c0 	ret

000000000000058c <memcpy>:

void *
memcpy(void * dst, void * src, unsigned long n)
{
    u8 * d = dst;
    while (n-- > 0)
 58c:	b40000e2 	cbz	x2, 5a8 <memcpy+0x1c>
 590:	d2800003 	mov	x3, #0x0                   	// #0
        *d++ = *((u8 *)src++);
 594:	38636824 	ldrb	w4, [x1, x3]
 598:	38236804 	strb	w4, [x0, x3]
    while (n-- > 0)
 59c:	91000463 	add	x3, x3, #0x1
 5a0:	eb02007f 	cmp	x3, x2
 5a4:	54ffff81 	b.ne	594 <memcpy+0x8>  // b.any
    return dst;
}
 5a8:	d65f03c0 	ret

00000000000005ac <n_bits_set>:

int
n_bits_set(u64 x)
{
 5ac:	aa0003e1 	mov	x1, x0
 5b0:	52800802 	mov	w2, #0x40                  	// #64
    int n = 0;
 5b4:	52800000 	mov	w0, #0x0                   	// #0
    for (int i = 0; i < 64; i++) {
        if (x & 1)
            n++;
 5b8:	12000023 	and	w3, w1, #0x1
 5bc:	0b030000 	add	w0, w0, w3
        x >>= 1;
 5c0:	d341fc21 	lsr	x1, x1, #1
    for (int i = 0; i < 64; i++) {
 5c4:	71000442 	subs	w2, w2, #0x1
 5c8:	54ffff81 	b.ne	5b8 <n_bits_set+0xc>  // b.any
    }
    return n;
}
 5cc:	d65f03c0 	ret

00000000000005d0 <hexdump>:

    hptr = hexbuf;
    aptr = asciibuf;
    i = column = 0;
    diff = 1;
    while (i < count) {
 5d0:	7100003f 	cmp	w1, #0x0
 5d4:	54000d0d 	b.le	774 <hexdump+0x1a4>
{
 5d8:	a9b47bfd 	stp	x29, x30, [sp, #-192]!
 5dc:	910003fd 	mov	x29, sp
 5e0:	a90153f3 	stp	x19, x20, [sp, #16]
 5e4:	a9025bf5 	stp	x21, x22, [sp, #32]
 5e8:	a90363f7 	stp	x23, x24, [sp, #48]
 5ec:	f90023f9 	str	x25, [sp, #64]
 5f0:	aa0203f8 	mov	x24, x2
 5f4:	aa0003f3 	mov	x19, x0
 5f8:	91000400 	add	x0, x0, #0x1
 5fc:	51000421 	sub	w1, w1, #0x1
 600:	8b010017 	add	x23, x0, x1
    aptr = asciibuf;
 604:	9101c3e2 	add	x2, sp, #0x70
    hptr = hexbuf;
 608:	910223e3 	add	x3, sp, #0x88
    diff = 1;
 60c:	52800034 	mov	w20, #0x1                   	// #1
    i = column = 0;
 610:	52800001 	mov	w1, #0x0                   	// #0
        unsigned char b = *((unsigned char *)buf + i);
        if (b != last[column]) diff = 1;
 614:	910163f6 	add	x22, sp, #0x58
 618:	2a1403f9 	mov	w25, w20
        last[column] = b;
        *hptr++ = xdigits[(b >> 4) & 0xf];
 61c:	90000015 	adrp	x21, 0 <_vsprintf>
 620:	910002b5 	add	x21, x21, #0x0
 624:	1400002f 	b	6e0 <hexdump+0x110>
        *aptr++ = (b >= ' ' && b <= '~') ? b : '.';
        if (++column == 16) {
            *hptr = *aptr = 0;
            if (diff == 0) {
                if (lastdiff == 1)
                    printf("(same)\n");
 628:	90000000 	adrp	x0, 0 <_vsprintf>
 62c:	91000000 	add	x0, x0, #0x0
 630:	94000000 	bl	468 <printf>
 634:	14000049 	b	758 <hexdump+0x188>
            } else {
                printf("%x: %s  %s\n", addr, hexbuf, asciibuf);
 638:	9101c3e3 	add	x3, sp, #0x70
 63c:	910223e2 	add	x2, sp, #0x88
 640:	aa1803e1 	mov	x1, x24
 644:	90000000 	adrp	x0, 0 <_vsprintf>
 648:	91000000 	add	x0, x0, #0x0
 64c:	94000000 	bl	468 <printf>
 650:	14000042 	b	758 <hexdump+0x188>
            hptr = hexbuf;
            aptr = asciibuf;
        }
        i++;
    }
    if (column) {
 654:	350000e1 	cbnz	w1, 670 <hexdump+0xa0>
        *hptr = *aptr = 0;
        printf("%x: %s  %s\n", addr, hexbuf, asciibuf);
    }
}
 658:	a94153f3 	ldp	x19, x20, [sp, #16]
 65c:	a9425bf5 	ldp	x21, x22, [sp, #32]
 660:	a94363f7 	ldp	x23, x24, [sp, #48]
 664:	f94023f9 	ldr	x25, [sp, #64]
 668:	a8cc7bfd 	ldp	x29, x30, [sp], #192
 66c:	d65f03c0 	ret
        *hptr = *aptr = 0;
 670:	3900005f 	strb	wzr, [x2]
 674:	3900007f 	strb	wzr, [x3]
        printf("%x: %s  %s\n", addr, hexbuf, asciibuf);
 678:	9101c3e3 	add	x3, sp, #0x70
 67c:	910223e2 	add	x2, sp, #0x88
 680:	aa1803e1 	mov	x1, x24
 684:	90000000 	adrp	x0, 0 <_vsprintf>
 688:	91000000 	add	x0, x0, #0x0
 68c:	94000000 	bl	468 <printf>
}
 690:	17fffff2 	b	658 <hexdump+0x88>
        *aptr++ = (b >= ' ' && b <= '~') ? b : '.';
 694:	38001440 	strb	w0, [x2], #1
        *hptr++ = column == 7 ? '-' : ' ';
 698:	aa0503e3 	mov	x3, x5
        if (++column == 16) {
 69c:	52800101 	mov	w1, #0x8                   	// #8
 6a0:	1400000d 	b	6d4 <hexdump+0x104>
        *hptr++ = column == 7 ? '-' : ' ';
 6a4:	91000c65 	add	x5, x3, #0x3
 6a8:	528005a4 	mov	w4, #0x2d                  	// #45
 6ac:	39000864 	strb	w4, [x3, #2]
        *aptr++ = (b >= ' ' && b <= '~') ? b : '.';
 6b0:	51008003 	sub	w3, w0, #0x20
 6b4:	12001c63 	and	w3, w3, #0xff
 6b8:	7101787f 	cmp	w3, #0x5e
 6bc:	54fffec9 	b.ls	694 <hexdump+0xc4>  // b.plast
 6c0:	528005c0 	mov	w0, #0x2e                  	// #46
 6c4:	39000040 	strb	w0, [x2]
        if (++column == 16) {
 6c8:	11000421 	add	w1, w1, #0x1
        *aptr++ = (b >= ' ' && b <= '~') ? b : '.';
 6cc:	91000442 	add	x2, x2, #0x1
 6d0:	aa0503e3 	mov	x3, x5
    while (i < count) {
 6d4:	91000673 	add	x19, x19, #0x1
 6d8:	eb17027f 	cmp	x19, x23
 6dc:	54fffbc0 	b.eq	654 <hexdump+0x84>  // b.none
        unsigned char b = *((unsigned char *)buf + i);
 6e0:	39400260 	ldrb	w0, [x19]
        if (b != last[column]) diff = 1;
 6e4:	3861cac4 	ldrb	w4, [x22, w1, sxtw]
 6e8:	6b00009f 	cmp	w4, w0
 6ec:	1a990294 	csel	w20, w20, w25, eq  // eq = none
        last[column] = b;
 6f0:	3821cac0 	strb	w0, [x22, w1, sxtw]
        *hptr++ = xdigits[(b >> 4) & 0xf];
 6f4:	53047c04 	lsr	w4, w0, #4
 6f8:	3864caa4 	ldrb	w4, [x21, w4, sxtw]
 6fc:	39000064 	strb	w4, [x3]
        *hptr++ = xdigits[b & 0xf];
 700:	12000c04 	and	w4, w0, #0xf
 704:	3864caa4 	ldrb	w4, [x21, w4, sxtw]
 708:	39000464 	strb	w4, [x3, #1]
        *hptr++ = column == 7 ? '-' : ' ';
 70c:	71001c3f 	cmp	w1, #0x7
 710:	54fffca0 	b.eq	6a4 <hexdump+0xd4>  // b.none
 714:	91000c65 	add	x5, x3, #0x3
 718:	52800404 	mov	w4, #0x20                  	// #32
 71c:	39000864 	strb	w4, [x3, #2]
        *aptr++ = (b >= ' ' && b <= '~') ? b : '.';
 720:	51008004 	sub	w4, w0, #0x20
 724:	12001c84 	and	w4, w4, #0xff
 728:	71017c9f 	cmp	w4, #0x5f
 72c:	528005c4 	mov	w4, #0x2e                  	// #46
 730:	1a843000 	csel	w0, w0, w4, cc  // cc = lo, ul, last
 734:	39000040 	strb	w0, [x2]
        if (++column == 16) {
 738:	11000421 	add	w1, w1, #0x1
 73c:	7100403f 	cmp	w1, #0x10
 740:	54fffc61 	b.ne	6cc <hexdump+0xfc>  // b.any
            *hptr = *aptr = 0;
 744:	3900045f 	strb	wzr, [x2, #1]
 748:	39000c7f 	strb	wzr, [x3, #3]
            if (diff == 0) {
 74c:	35fff774 	cbnz	w20, 638 <hexdump+0x68>
                if (lastdiff == 1)
 750:	710004df 	cmp	w6, #0x1
 754:	54fff6a0 	b.eq	628 <hexdump+0x58>  // b.none
            addr += 16;
 758:	91004318 	add	x24, x24, #0x10
            lastdiff = diff;
 75c:	2a1403e6 	mov	w6, w20
            aptr = asciibuf;
 760:	9101c3e2 	add	x2, sp, #0x70
            hptr = hexbuf;
 764:	910223e3 	add	x3, sp, #0x88
            diff = 0;
 768:	52800014 	mov	w20, #0x0                   	// #0
            column = 0;
 76c:	52800001 	mov	w1, #0x0                   	// #0
 770:	17ffffd9 	b	6d4 <hexdump+0x104>
 774:	d65f03c0 	ret

0000000000000778 <stkdump>:
// course, the caveat that large stack allocations will break stkdump()
#define MAX_LOCAL_ALLOC 0x200

void
stkdump(void)
{
 778:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
 77c:	910003fd 	mov	x29, sp
 780:	a90153f3 	stp	x19, x20, [sp, #16]
 784:	a9025bf5 	stp	x21, x22, [sp, #32]
    u64 * sp;
    u64 * pc;
    //u64 * fp;
    int i;

    asm volatile("mov %0, sp" : "=r" (sp) : );
 788:	910003f5 	mov	x21, sp
 78c:	d2800000 	mov	x0, #0x0                   	// #0
    //printf("sp(%x) sp[0](%x) sp[1](%x) sp[2](%x) sp[3](%x) sp[4](%x) sp[5](%x)\n",
    //        sp, sp[0], sp[1], sp[2], sp[3], sp[4], sp[5]);

    // find previous sp - it should not be far, stkdump has no args
    for (i = 0; i < 4; i++) {
        if (sp[i] > (u64)sp  &&  sp[i] < ((u64)sp + MAX_LOCAL_ALLOC))
 790:	910802a3 	add	x3, x21, #0x200
 794:	14000005 	b	7a8 <stkdump+0x30>
    for (i = 0; i < 4; i++) {
 798:	11000454 	add	w20, w2, #0x1
 79c:	91000400 	add	x0, x0, #0x1
 7a0:	f100101f 	cmp	x0, #0x4
 7a4:	540003a0 	b.eq	818 <stkdump+0xa0>  // b.none
 7a8:	2a0003e2 	mov	w2, w0
 7ac:	2a0003f4 	mov	w20, w0
        if (sp[i] > (u64)sp  &&  sp[i] < ((u64)sp + MAX_LOCAL_ALLOC))
 7b0:	f8607aa1 	ldr	x1, [x21, x0, lsl #3]
 7b4:	eb15003f 	cmp	x1, x21
 7b8:	54ffff09 	b.ls	798 <stkdump+0x20>  // b.plast
 7bc:	eb03003f 	cmp	x1, x3
 7c0:	54fffec2 	b.cs	798 <stkdump+0x20>  // b.hs, b.nlast
            break;
    }

    if (i >= 4) {
 7c4:	71000c1f 	cmp	w0, #0x3
 7c8:	5400028c 	b.gt	818 <stkdump+0xa0>
 7cc:	a90363f7 	stp	x23, x24, [sp, #48]
 7d0:	f90023f9 	str	x25, [sp, #64]
 7d4:	d53bd053 	mrs	x19, tpidr_el0
        printf("frame not found ... %x,%x,%x,%x\n", sp[i], sp[i+1], sp[i+2], sp[i+3]);
        return;
    }

    struct thread * th = get_thread_data();
    char * q = th->print_buf;
 7d8:	91020279 	add	x25, x19, #0x80
    q += sprintf(q, "%s", "*** stack:\n");
 7dc:	d2800182 	mov	x2, #0xc                   	// #12
 7e0:	90000001 	adrp	x1, 0 <_vsprintf>
 7e4:	91000021 	add	x1, x1, #0x0
 7e8:	aa1903e0 	mov	x0, x25
 7ec:	94000000 	bl	58c <memcpy>
 7f0:	91022e73 	add	x19, x19, #0x8b

    sp = (u64 *)sp[i];
 7f4:	f874dab5 	ldr	x21, [x21, w20, sxtw #3]
    pc = (u64 *)sp[i+1];
 7f8:	8b34ceb4 	add	x20, x21, w20, sxtw #3
 7fc:	f9400683 	ldr	x3, [x20, #8]
    do {
        q += sprintf(q, "*** exc: cpu(%d) pc(%x) sp(%x) ret(%x)",
 800:	90000017 	adrp	x23, 0 <_vsprintf>
 804:	910002f7 	add	x23, x23, #0x0
            *q++ = '\n';
            break;
        }

        for (i = 2; (u64)(sp + i) < sp[0] ; i++)
            q += sprintf(q, " %x", sp[i]);
 808:	90000016 	adrp	x22, 0 <_vsprintf>
 80c:	910002d6 	add	x22, x22, #0x0
        pc = (u64 *)sp[1];
        sp = (u64 *)sp[0];
        *q++ = '\n';
 810:	52800158 	mov	w24, #0xa                   	// #10
 814:	14000018 	b	874 <stkdump+0xfc>
        printf("frame not found ... %x,%x,%x,%x\n", sp[i], sp[i+1], sp[i+2], sp[i+3]);
 818:	8b34cea0 	add	x0, x21, w20, sxtw #3
 81c:	f9400c04 	ldr	x4, [x0, #24]
 820:	f9400803 	ldr	x3, [x0, #16]
 824:	f9400402 	ldr	x2, [x0, #8]
 828:	f874daa1 	ldr	x1, [x21, w20, sxtw #3]
 82c:	90000000 	adrp	x0, 0 <_vsprintf>
 830:	91000000 	add	x0, x0, #0x0
 834:	94000000 	bl	468 <printf>
        return;
 838:	14000008 	b	858 <stkdump+0xe0>
            *q++ = '\n';
 83c:	52800140 	mov	w0, #0xa                   	// #10
 840:	39000260 	strb	w0, [x19]
    } while (1);
    *q = '\0';
 844:	3900067f 	strb	wzr, [x19, #1]

    puts(th->print_buf);
 848:	aa1903e0 	mov	x0, x25
 84c:	94000000 	bl	360 <puts>
 850:	a94363f7 	ldp	x23, x24, [sp, #48]
 854:	f94023f9 	ldr	x25, [sp, #64]
}
 858:	a94153f3 	ldp	x19, x20, [sp, #16]
 85c:	a9425bf5 	ldp	x21, x22, [sp, #32]
 860:	a8c57bfd 	ldp	x29, x30, [sp], #80
 864:	d65f03c0 	ret
        pc = (u64 *)sp[1];
 868:	f94006a3 	ldr	x3, [x21, #8]
        sp = (u64 *)sp[0];
 86c:	aa0003f5 	mov	x21, x0
        *q++ = '\n';
 870:	38001678 	strb	w24, [x19], #1
 874:	d53bd040 	mrs	x0, tpidr_el0
        q += sprintf(q, "*** exc: cpu(%d) pc(%x) sp(%x) ret(%x)",
 878:	f94002a5 	ldr	x5, [x21]
 87c:	aa1503e4 	mov	x4, x21
 880:	b9400802 	ldr	w2, [x0, #8]
 884:	aa1703e1 	mov	x1, x23
 888:	aa1303e0 	mov	x0, x19
 88c:	94000000 	bl	408 <sprintf>
 890:	8b20c273 	add	x19, x19, w0, sxtw
        if (sp[0] < (u64)sp  ||  sp[0] > ((u64)sp + MAX_LOCAL_ALLOC)) {
 894:	f94002a0 	ldr	x0, [x21]
 898:	eb15001f 	cmp	x0, x21
 89c:	54fffd03 	b.cc	83c <stkdump+0xc4>  // b.lo, b.ul, b.last
 8a0:	910802a1 	add	x1, x21, #0x200
 8a4:	eb01001f 	cmp	x0, x1
 8a8:	54fffca8 	b.hi	83c <stkdump+0xc4>  // b.pmore
        for (i = 2; (u64)(sp + i) < sp[0] ; i++)
 8ac:	910042b4 	add	x20, x21, #0x10
 8b0:	eb14001f 	cmp	x0, x20
 8b4:	54fffda9 	b.ls	868 <stkdump+0xf0>  // b.plast
            q += sprintf(q, " %x", sp[i]);
 8b8:	f8408682 	ldr	x2, [x20], #8
 8bc:	aa1603e1 	mov	x1, x22
 8c0:	aa1303e0 	mov	x0, x19
 8c4:	94000000 	bl	408 <sprintf>
 8c8:	8b20c273 	add	x19, x19, w0, sxtw
        for (i = 2; (u64)(sp + i) < sp[0] ; i++)
 8cc:	f94002a0 	ldr	x0, [x21]
 8d0:	eb14001f 	cmp	x0, x20
 8d4:	54ffff28 	b.hi	8b8 <stkdump+0x140>  // b.pmore
 8d8:	17ffffe4 	b	868 <stkdump+0xf0>
