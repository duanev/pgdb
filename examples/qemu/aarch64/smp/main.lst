
main.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <exc_handler>:
    "el32_sync", "el32_irq", "el32_fiq", "el32_serror"
};

void
exc_handler(u64 vecno, u64 esr, u64 elr, u64 far)
{
   0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   4:	910003fd 	mov	x29, sp
   8:	aa0203e4 	mov	x4, x2
   c:	aa0303e5 	mov	x5, x3

static inline u64
armv8_get_tp(void)
{
    u64 tp;
    asm volatile("mrs %0, tpidr_el0" : "=r" (tp) : : );
  10:	d53bd046 	mrs	x6, tpidr_el0
    printf("*** exc: cpu(%d) %s esr(%lx) elr(%lx) far(%lx)\n",
  14:	aa0103e3 	mov	x3, x1
  18:	90000001 	adrp	x1, 0 <exc_handler>
  1c:	91000021 	add	x1, x1, #0x0
  20:	f8607822 	ldr	x2, [x1, x0, lsl #3]
  24:	b94008c1 	ldr	w1, [x6, #8]
  28:	90000000 	adrp	x0, 0 <exc_handler>
  2c:	91000000 	add	x0, x0, #0x0
  30:	94000000 	bl	0 <printf>
            cpu_id(), exc_vec_labels[vecno], esr, elr, far);
    stkdump();
  34:	94000000 	bl	0 <stkdump>
}
  38:	a8c17bfd 	ldp	x29, x30, [sp], #16
  3c:	d65f03c0 	ret

0000000000000040 <main>:
struct mem_pool * pool128k = 0;
struct mem_pool * pool4k   = 0;

void
main(int ac, char * av[])
{
  40:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
  44:	910003fd 	mov	x29, sp
    asm("mrs %0, currentel; lsr %0, %0, 2" : "=r" (status) : : );
  48:	d5384241 	mrs	x1, currentel
  4c:	d342fc21 	lsr	x1, x1, #2
    printf("smp v0.91 2019/10/08 el%d\n", armv8_get_el());
  50:	90000000 	adrp	x0, 0 <exc_handler>
  54:	91000000 	add	x0, x0, #0x0
  58:	94000000 	bl	0 <printf>
    // establish the system memory pools from DRAM following the 'data' segment
    // qemu -m 256   give about 128MB to each pool   (and check smp.ld)

#   define LOADADDR 0x40000000
#   define SIZE4k   (LOADADDR + 128 * 1024 * 1024 - (u64)&_free_mem)
    pool4k = mem_pool_create("4k gp", (u64)&_free_mem, SIZE4k, 4 * 1024, 1);
  5c:	90000001 	adrp	x1, 0 <_free_mem>
  60:	91000021 	add	x1, x1, #0x0
  64:	52800024 	mov	w4, #0x1                   	// #1
  68:	d2820003 	mov	x3, #0x1000                	// #4096
  6c:	d2a90002 	mov	x2, #0x48000000            	// #1207959552
  70:	cb010042 	sub	x2, x2, x1
  74:	90000000 	adrp	x0, 0 <exc_handler>
  78:	91000000 	add	x0, x0, #0x0
  7c:	94000000 	bl	0 <mem_pool_create>
  80:	90000001 	adrp	x1, 0 <exc_handler>
  84:	f9000020 	str	x0, [x1]
    if (pool4k == 0)  return;
  88:	b4000200 	cbz	x0, c8 <main+0x88>

#   define SIZE128k (128 * 1024 * 1024)
    pool128k = mem_pool_create("128k gp", (u64)&_free_mem + SIZE4k, SIZE128k, 128 * 1024, 1);
  8c:	52800024 	mov	w4, #0x1                   	// #1
  90:	d2a00043 	mov	x3, #0x20000               	// #131072
  94:	d2a10002 	mov	x2, #0x8000000             	// #134217728
  98:	d2a90001 	mov	x1, #0x48000000            	// #1207959552
  9c:	90000000 	adrp	x0, 0 <exc_handler>
  a0:	91000000 	add	x0, x0, #0x0
  a4:	94000000 	bl	0 <mem_pool_create>
  a8:	90000001 	adrp	x1, 0 <exc_handler>
  ac:	f9000020 	str	x0, [x1]
    if (pool128k == 0)  return;
  b0:	b40000c0 	cbz	x0, c8 <main+0x88>

    smp_init();
  b4:	94000000 	bl	0 <smp_init>

    do {
    } while (con_peek() == 0);
  b8:	94000000 	bl	0 <con_peek>
  bc:	12001c00 	and	w0, w0, #0xff
  c0:	34ffffc0 	cbz	w0, b8 <main+0x78>
    con_getc();
  c4:	94000000 	bl	0 <con_getc>
}
  c8:	a8c17bfd 	ldp	x29, x30, [sp], #16
  cc:	d65f03c0 	ret
