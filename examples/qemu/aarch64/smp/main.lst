
main.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <exc_handler>:
    "el32_sync", "el32_irq", "el32_fiq", "el32_serror"
};

void
exc_handler(u64 vecno, u64 esr, u64 elr, u64 far)
{
   0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   4:	910003fd 	mov	x29, sp
   8:	aa0203e4 	mov	x4, x2
   c:	aa0303e5 	mov	x5, x3

static inline u64
armv8_get_tp(void)
{
    u64 tp;
    asm volatile("mrs %0, tpidr_el0" : "=r" (tp) : : );
  10:	d53bd046 	mrs	x6, tpidr_el0
    printf("*** exc: cpu(%d) %s esr(%lx) elr(%lx) far(%lx)\n",
  14:	aa0103e3 	mov	x3, x1
  18:	90000001 	adrp	x1, 0 <exc_handler>
  1c:	91000021 	add	x1, x1, #0x0
  20:	f8607822 	ldr	x2, [x1, x0, lsl #3]
  24:	b94008c1 	ldr	w1, [x6, #8]
  28:	90000000 	adrp	x0, 0 <exc_handler>
  2c:	91000000 	add	x0, x0, #0x0
  30:	94000000 	bl	0 <printf>
            cpu_id(), exc_vec_labels[vecno], esr, elr, far);
    stkdump();
  34:	94000000 	bl	0 <stkdump>
}
  38:	a8c17bfd 	ldp	x29, x30, [sp], #16
  3c:	d65f03c0 	ret

0000000000000040 <main>:

extern int _free_mem;

void
main(int ac, char * av[])
{
  40:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
  44:	910003fd 	mov	x29, sp
    asm("mrs %0, currentel; lsr %0, %0, 2" : "=r" (status) : : );
  48:	d5384241 	mrs	x1, currentel
  4c:	d342fc21 	lsr	x1, x1, #2
    printf("smp v0.91 2019/10/08 el%d\n", armv8_get_el());
  50:	90000000 	adrp	x0, 0 <exc_handler>
  54:	91000000 	add	x0, x0, #0x0
  58:	94000000 	bl	0 <printf>

    // establish the system memory pools from DRAM following the 'data' segment (see tasks.ld)

    pool0 = mem_pool_create("128k top", (u64)&_free_mem, 256 * 1024 * 1024, 128 * 1024);
  5c:	d2a00043 	mov	x3, #0x20000               	// #131072
  60:	d2a20002 	mov	x2, #0x10000000            	// #268435456
  64:	90000001 	adrp	x1, 0 <_free_mem>
  68:	91000021 	add	x1, x1, #0x0
  6c:	90000000 	adrp	x0, 0 <exc_handler>
  70:	91000000 	add	x0, x0, #0x0
  74:	94000000 	bl	0 <mem_pool_create>
  78:	90000001 	adrp	x1, 8 <exc_handler+0x8>
  7c:	f9000020 	str	x0, [x1]
    if (pool0 == 0)  return;
  80:	b4000440 	cbz	x0, 108 <main+0xc8>
  84:	f9000bf3 	str	x19, [sp, #16]
    pool4k = (struct mem_pool *)mem_alloc(pool0, 4);
  88:	52800081 	mov	w1, #0x4                   	// #4
  8c:	94000000 	bl	0 <mem_alloc>
  90:	aa0003e1 	mov	x1, x0
  94:	90000013 	adrp	x19, 8 <exc_handler+0x8>
  98:	f9000260 	str	x0, [x19]
    mem_pool_create("4k gp", (u64)pool4k, pool0->usize * 4, 4 * 1024);
  9c:	90000000 	adrp	x0, 8 <exc_handler+0x8>
  a0:	f9400000 	ldr	x0, [x0]
  a4:	f9400802 	ldr	x2, [x0, #16]
  a8:	d2820003 	mov	x3, #0x1000                	// #4096
  ac:	d37ef442 	lsl	x2, x2, #2
  b0:	90000000 	adrp	x0, 0 <exc_handler>
  b4:	91000000 	add	x0, x0, #0x0
  b8:	94000000 	bl	0 <mem_pool_create>
    if (pool4k == 0)  return;
  bc:	f9400260 	ldr	x0, [x19]
  c0:	b4000280 	cbz	x0, 110 <main+0xd0>

    smp_init();
  c4:	94000000 	bl	0 <smp_init>

    do {
    } while (con_peek() == 0);
  c8:	94000000 	bl	0 <con_peek>
  cc:	12001c00 	and	w0, w0, #0xff
  d0:	34ffffc0 	cbz	w0, c8 <main+0x88>
    con_getc();
  d4:	94000000 	bl	0 <con_getc>

    // reset the system memory pools

    memset((void *)pool4k, 0, sizeof(struct mem_pool));
  d8:	d2800513 	mov	x19, #0x28                  	// #40
  dc:	aa1303e2 	mov	x2, x19
  e0:	52800001 	mov	w1, #0x0                   	// #0
  e4:	90000000 	adrp	x0, 8 <exc_handler+0x8>
  e8:	f9400000 	ldr	x0, [x0]
  ec:	94000000 	bl	0 <memset>
    memset((void *)pool0,  0, sizeof(struct mem_pool));
  f0:	aa1303e2 	mov	x2, x19
  f4:	52800001 	mov	w1, #0x0                   	// #0
  f8:	90000000 	adrp	x0, 8 <exc_handler+0x8>
  fc:	f9400000 	ldr	x0, [x0]
 100:	94000000 	bl	0 <memset>
 104:	f9400bf3 	ldr	x19, [sp, #16]
}
 108:	a8c27bfd 	ldp	x29, x30, [sp], #32
 10c:	d65f03c0 	ret
 110:	f9400bf3 	ldr	x19, [sp, #16]
 114:	17fffffd 	b	108 <main+0xc8>
