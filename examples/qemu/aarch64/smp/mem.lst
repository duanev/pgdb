
mem.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <bitmap_create>:
#define BLK_SIZE        (sizeof(u64) * BITS_PER_BYTE)

void
bitmap_create(struct bitmap * map, int size)
{
    map->nblks = (size + BLK_SIZE - 1) / BLK_SIZE;
   0:	93407c21 	sxtw	x1, w1
   4:	9100fc21 	add	x1, x1, #0x3f
   8:	d346fc21 	lsr	x1, x1, #6
   c:	b9000001 	str	w1, [x0]
    map->count = 0;
  10:	b900041f 	str	wzr, [x0, #4]
    return;
}
  14:	d65f03c0 	ret

0000000000000018 <bitmap_set>:
void
bitmap_set(struct bitmap * map, int n)
{
    int blk = n / BLK_SIZE;
    int bit = n % BLK_SIZE;
    if ((map->blks[blk] & (1UL << bit)) == 0) {
  18:	93467c22 	sbfx	x2, x1, #6, #26
  1c:	8b020c02 	add	x2, x0, x2, lsl #3
  20:	f9400444 	ldr	x4, [x2, #8]
  24:	d2800023 	mov	x3, #0x1                   	// #1
  28:	9ac12061 	lsl	x1, x3, x1
  2c:	ea01009f 	tst	x4, x1
  30:	540000c1 	b.ne	48 <bitmap_set+0x30>  // b.any
        map->blks[blk] |= (1UL << bit);
  34:	aa010081 	orr	x1, x4, x1
  38:	f9000441 	str	x1, [x2, #8]
        map->count++;
  3c:	b9400401 	ldr	w1, [x0, #4]
  40:	11000421 	add	w1, w1, #0x1
  44:	b9000401 	str	w1, [x0, #4]
    }
}
  48:	d65f03c0 	ret

000000000000004c <bitmap_clear>:
void
bitmap_clear(struct bitmap * map, int n)
{
    int blk = n / BLK_SIZE;
    int bit = n % BLK_SIZE;
    if (map->blks[blk] & (1UL << bit)) {
  4c:	93467c23 	sbfx	x3, x1, #6, #26
  50:	8b030c03 	add	x3, x0, x3, lsl #3
  54:	f9400464 	ldr	x4, [x3, #8]
  58:	d2800022 	mov	x2, #0x1                   	// #1
  5c:	9ac12041 	lsl	x1, x2, x1
  60:	ea01009f 	tst	x4, x1
  64:	540000c0 	b.eq	7c <bitmap_clear+0x30>  // b.none
        map->blks[blk] &= ~(1UL << bit);
  68:	8a210081 	bic	x1, x4, x1
  6c:	f9000461 	str	x1, [x3, #8]
        map->count--;
  70:	b9400401 	ldr	w1, [x0, #4]
  74:	51000421 	sub	w1, w1, #0x1
  78:	b9000401 	str	w1, [x0, #4]
    }
}
  7c:	d65f03c0 	ret

0000000000000080 <bitmap_first_1_free>:
bitmap_first_1_free(struct bitmap * map)
{
    int blk;
    int bit;

    for (blk = 0; blk < map->nblks; blk++)
  80:	b9400008 	ldr	w8, [x0]
  84:	7100011f 	cmp	w8, #0x0
  88:	5400036d 	b.le	f4 <bitmap_first_1_free+0x74>
  8c:	d2800005 	mov	x5, #0x0                   	// #0
        if (map->blks[blk] != ALL_BITS_ON)
  90:	91002006 	add	x6, x0, #0x8
            for (bit = 0; bit < BLK_SIZE; bit++)
                if ((map->blks[blk] & (1UL << bit)) == 0)
  94:	d2800024 	mov	x4, #0x1                   	// #1
  98:	14000007 	b	b4 <bitmap_first_1_free+0x34>
            for (bit = 0; bit < BLK_SIZE; bit++)
  9c:	52800000 	mov	w0, #0x0                   	// #0
                    return blk * BLK_SIZE + bit;
  a0:	0b071800 	add	w0, w0, w7, lsl #6
    return -1;
}
  a4:	d65f03c0 	ret
    for (blk = 0; blk < map->nblks; blk++)
  a8:	910004a5 	add	x5, x5, #0x1
  ac:	6b05011f 	cmp	w8, w5
  b0:	540001ed 	b.le	ec <bitmap_first_1_free+0x6c>
  b4:	2a0503e7 	mov	w7, w5
        if (map->blks[blk] != ALL_BITS_ON)
  b8:	f86578c3 	ldr	x3, [x6, x5, lsl #3]
  bc:	b100047f 	cmn	x3, #0x1
  c0:	54ffff40 	b.eq	a8 <bitmap_first_1_free+0x28>  // b.none
                if ((map->blks[blk] & (1UL << bit)) == 0)
  c4:	3607fec3 	tbz	w3, #0, 9c <bitmap_first_1_free+0x1c>
            for (bit = 0; bit < BLK_SIZE; bit++)
  c8:	52800021 	mov	w1, #0x1                   	// #1
  cc:	2a0103e0 	mov	w0, w1
                if ((map->blks[blk] & (1UL << bit)) == 0)
  d0:	9ac12082 	lsl	x2, x4, x1
  d4:	ea03005f 	tst	x2, x3
  d8:	54fffe40 	b.eq	a0 <bitmap_first_1_free+0x20>  // b.none
            for (bit = 0; bit < BLK_SIZE; bit++)
  dc:	11000421 	add	w1, w1, #0x1
  e0:	7101003f 	cmp	w1, #0x40
  e4:	54ffff41 	b.ne	cc <bitmap_first_1_free+0x4c>  // b.any
  e8:	17fffff0 	b	a8 <bitmap_first_1_free+0x28>
    return -1;
  ec:	12800000 	mov	w0, #0xffffffff            	// #-1
  f0:	17ffffed 	b	a4 <bitmap_first_1_free+0x24>
  f4:	12800000 	mov	w0, #0xffffffff            	// #-1
  f8:	17ffffeb 	b	a4 <bitmap_first_1_free+0x24>

00000000000000fc <bitmap_first_n_free>:
 * find the index of the first N free objects,
 * -1 means no N contiguous objects
 */
int
bitmap_first_n_free(struct bitmap * map, int n)
{
  fc:	aa0003ea 	mov	x10, x0
    int blk;
    int bit;
    int i = 0;
    int idx = -1;

    for (blk = 0; blk < map->nblks; blk++)
 100:	b940000b 	ldr	w11, [x0]
 104:	7100017f 	cmp	w11, #0x0
 108:	5400044d 	b.le	190 <bitmap_first_n_free+0x94>
 10c:	d2800009 	mov	x9, #0x0                   	// #0
    int idx = -1;
 110:	12800000 	mov	w0, #0xffffffff            	// #-1
    int i = 0;
 114:	52800003 	mov	w3, #0x0                   	// #0
        if (map->blks[blk] != ALL_BITS_ON)
 118:	9100214a 	add	x10, x10, #0x8
            for (bit = 0; bit < BLK_SIZE; bit++)
                if ((map->blks[blk] & (1UL << bit)) == 0) {
 11c:	d2800026 	mov	x6, #0x1                   	// #1
                        idx = blk * BLK_SIZE + bit;
                    i++;
                    if (i >= n)
                        return idx;
                } else {
                    idx = -1;
 120:	2a0003e8 	mov	w8, w0
 124:	14000013 	b	170 <bitmap_first_n_free+0x74>
 128:	2a0803e0 	mov	w0, w8
                    i = 0;
 12c:	52800003 	mov	w3, #0x0                   	// #0
            for (bit = 0; bit < BLK_SIZE; bit++)
 130:	11000442 	add	w2, w2, #0x1
 134:	7101005f 	cmp	w2, #0x40
 138:	54000160 	b.eq	164 <bitmap_first_n_free+0x68>  // b.none
                if ((map->blks[blk] & (1UL << bit)) == 0) {
 13c:	9ac220c4 	lsl	x4, x6, x2
 140:	ea05009f 	tst	x4, x5
 144:	54ffff21 	b.ne	128 <bitmap_first_n_free+0x2c>  // b.any
                    if (idx == -1)
 148:	0b070044 	add	w4, w2, w7
 14c:	3100041f 	cmn	w0, #0x1
 150:	1a800080 	csel	w0, w4, w0, eq  // eq = none
                    i++;
 154:	11000463 	add	w3, w3, #0x1
                    if (i >= n)
 158:	6b01007f 	cmp	w3, w1
 15c:	54fffeab 	b.lt	130 <bitmap_first_n_free+0x34>  // b.tstop
                }
    return -1;
}
 160:	d65f03c0 	ret
    for (blk = 0; blk < map->nblks; blk++)
 164:	91000529 	add	x9, x9, #0x1
 168:	6b09017f 	cmp	w11, w9
 16c:	540000ed 	b.le	188 <bitmap_first_n_free+0x8c>
        if (map->blks[blk] != ALL_BITS_ON)
 170:	f8697945 	ldr	x5, [x10, x9, lsl #3]
 174:	b10004bf 	cmn	x5, #0x1
 178:	54ffff60 	b.eq	164 <bitmap_first_n_free+0x68>  // b.none
            for (bit = 0; bit < BLK_SIZE; bit++)
 17c:	531a6527 	lsl	w7, w9, #6
 180:	52800002 	mov	w2, #0x0                   	// #0
 184:	17ffffee 	b	13c <bitmap_first_n_free+0x40>
    return -1;
 188:	12800000 	mov	w0, #0xffffffff            	// #-1
 18c:	17fffff5 	b	160 <bitmap_first_n_free+0x64>
 190:	12800000 	mov	w0, #0xffffffff            	// #-1
 194:	17fffff3 	b	160 <bitmap_first_n_free+0x64>

0000000000000198 <mem_alloc>:
/*
 * the caller must remember what N was ...
 */
u64
mem_alloc(struct mem_pool * pool, int n)
{
 198:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
 19c:	910003fd 	mov	x29, sp
 1a0:	a90363f7 	stp	x23, x24, [sp, #48]
    if (pool == 0) {
 1a4:	b4000780 	cbz	x0, 294 <mem_alloc+0xfc>
 1a8:	a90153f3 	stp	x19, x20, [sp, #16]
 1ac:	a9025bf5 	stp	x21, x22, [sp, #32]
 1b0:	aa0003f3 	mov	x19, x0
 1b4:	2a0103f5 	mov	w21, w1
        stkdump();
        return 0;
    }

    u32 token;
    wait_for_token(pool, token);
 1b8:	90000000 	adrp	x0, 0 <bitmap_create>
 1bc:	91000000 	add	x0, x0, #0x0
 1c0:	91010000 	add	x0, x0, #0x40
 1c4:	c85f7c03 	ldxr	x3, [x0]
 1c8:	91000461 	add	x1, x3, #0x1
 1cc:	c802fc01 	stlxr	w2, x1, [x0]
 1d0:	35ffffa2 	cbnz	w2, 1c4 <mem_alloc+0x2c>
 1d4:	d5033bbf 	dmb	ish
 1d8:	12000877 	and	w23, w3, #0x7
 1dc:	90000004 	adrp	x4, 0 <bitmap_create>
 1e0:	91000084 	add	x4, x4, #0x0
 1e4:	92400863 	and	x3, x3, #0x7
 1e8:	f8637882 	ldr	x2, [x4, x3, lsl #3]
 1ec:	b4ffffe2 	cbz	x2, 1e8 <mem_alloc+0x50>
 1f0:	2a1703e1 	mov	w1, w23
 1f4:	90000000 	adrp	x0, 0 <bitmap_create>
 1f8:	91000000 	add	x0, x0, #0x0
 1fc:	f821781f 	str	xzr, [x0, x1, lsl #3]
 200:	110006f7 	add	w23, w23, #0x1
    int idx = bitmap_first_n_free(&pool->map, n);
 204:	91008276 	add	x22, x19, #0x20
 208:	2a1503e1 	mov	w1, w21
 20c:	aa1603e0 	mov	x0, x22
 210:	94000000 	bl	fc <bitmap_first_n_free>
    if (idx == -1) {
 214:	3100041f 	cmn	w0, #0x1
 218:	540004a0 	b.eq	2ac <mem_alloc+0x114>  // b.none
        return_token(pool, token);
        printf("mem_alloc error: pool map %s is full\n", pool->name);
        stkdump();
        return 0;
    }
    u64 addr = idx * pool->usize + pool->base;
 21c:	f9400a62 	ldr	x2, [x19, #16]
 220:	f9400261 	ldr	x1, [x19]
 224:	93407c18 	sxtw	x24, w0
 228:	9b020718 	madd	x24, x24, x2, x1
    // bitmap_first_n_free can run off the end, double check the addr
    if (addr > pool->base + pool->size - pool->usize) {
 22c:	f9400663 	ldr	x3, [x19, #8]
 230:	8b030021 	add	x1, x1, x3
 234:	cb020021 	sub	x1, x1, x2
 238:	eb18003f 	cmp	x1, x24
 23c:	54000543 	b.cc	2e4 <mem_alloc+0x14c>  // b.lo, b.ul, b.last
        printf("mem_alloc error: pool %s is empty\n", pool->name);
        stkdump();
        return 0;
    }

    for (int i = 0; i < n; i++)
 240:	2a0003f3 	mov	w19, w0
 244:	0b0002b4 	add	w20, w21, w0
 248:	710002bf 	cmp	w21, #0x0
 24c:	540000ed 	b.le	268 <mem_alloc+0xd0>
        bitmap_set(&pool->map, idx + i);
 250:	2a1303e1 	mov	w1, w19
 254:	aa1603e0 	mov	x0, x22
 258:	94000000 	bl	18 <bitmap_set>
    for (int i = 0; i < n; i++)
 25c:	11000673 	add	w19, w19, #0x1
 260:	6b14027f 	cmp	w19, w20
 264:	54ffff61 	b.ne	250 <mem_alloc+0xb8>  // b.any
    return_token(pool, token);
 268:	92400af7 	and	x23, x23, #0x7
 26c:	90000000 	adrp	x0, 0 <bitmap_create>
 270:	91000000 	add	x0, x0, #0x0
 274:	d2800021 	mov	x1, #0x1                   	// #1
 278:	f8377801 	str	x1, [x0, x23, lsl #3]
 27c:	a94153f3 	ldp	x19, x20, [sp, #16]
 280:	a9425bf5 	ldp	x21, x22, [sp, #32]

    return addr;
}
 284:	aa1803e0 	mov	x0, x24
 288:	a94363f7 	ldp	x23, x24, [sp, #48]
 28c:	a8c47bfd 	ldp	x29, x30, [sp], #64
 290:	d65f03c0 	ret
        printf("mem_alloc error: pool uninitialized\n");
 294:	90000000 	adrp	x0, 0 <bitmap_create>
 298:	91000000 	add	x0, x0, #0x0
 29c:	94000000 	bl	0 <printf>
        stkdump();
 2a0:	94000000 	bl	0 <stkdump>
        return 0;
 2a4:	d2800018 	mov	x24, #0x0                   	// #0
 2a8:	17fffff7 	b	284 <mem_alloc+0xec>
        return_token(pool, token);
 2ac:	92400af7 	and	x23, x23, #0x7
 2b0:	90000000 	adrp	x0, 0 <bitmap_create>
 2b4:	91000000 	add	x0, x0, #0x0
 2b8:	d2800021 	mov	x1, #0x1                   	// #1
 2bc:	f8377801 	str	x1, [x0, x23, lsl #3]
        printf("mem_alloc error: pool map %s is full\n", pool->name);
 2c0:	f9400e61 	ldr	x1, [x19, #24]
 2c4:	90000000 	adrp	x0, 0 <bitmap_create>
 2c8:	91000000 	add	x0, x0, #0x0
 2cc:	94000000 	bl	0 <printf>
        stkdump();
 2d0:	94000000 	bl	0 <stkdump>
        return 0;
 2d4:	d2800018 	mov	x24, #0x0                   	// #0
 2d8:	a94153f3 	ldp	x19, x20, [sp, #16]
 2dc:	a9425bf5 	ldp	x21, x22, [sp, #32]
 2e0:	17ffffe9 	b	284 <mem_alloc+0xec>
        return_token(pool, token);
 2e4:	92400af7 	and	x23, x23, #0x7
 2e8:	90000000 	adrp	x0, 0 <bitmap_create>
 2ec:	91000000 	add	x0, x0, #0x0
 2f0:	d2800021 	mov	x1, #0x1                   	// #1
 2f4:	f8377801 	str	x1, [x0, x23, lsl #3]
        printf("mem_alloc error: pool %s is empty\n", pool->name);
 2f8:	f9400e61 	ldr	x1, [x19, #24]
 2fc:	90000000 	adrp	x0, 0 <bitmap_create>
 300:	91000000 	add	x0, x0, #0x0
 304:	94000000 	bl	0 <printf>
        stkdump();
 308:	94000000 	bl	0 <stkdump>
        return 0;
 30c:	d2800018 	mov	x24, #0x0                   	// #0
 310:	a94153f3 	ldp	x19, x20, [sp, #16]
 314:	a9425bf5 	ldp	x21, x22, [sp, #32]
 318:	17ffffdb 	b	284 <mem_alloc+0xec>

000000000000031c <mem_free>:

void
mem_free(struct mem_pool * pool, u64 addr, int n, int zero)
{
 31c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
 320:	910003fd 	mov	x29, sp
 324:	a90153f3 	stp	x19, x20, [sp, #16]
 328:	aa0003f4 	mov	x20, x0
 32c:	aa0103f3 	mov	x19, x1
    if (addr < pool->base  ||  addr >= pool->base + pool->size) {
 330:	f9400000 	ldr	x0, [x0]
 334:	eb01001f 	cmp	x0, x1
 338:	54000688 	b.hi	408 <mem_free+0xec>  // b.pmore
 33c:	a9025bf5 	stp	x21, x22, [sp, #32]
 340:	2a0203f5 	mov	w21, w2
 344:	f9400681 	ldr	x1, [x20, #8]
 348:	8b010000 	add	x0, x0, x1
 34c:	eb13001f 	cmp	x0, x19
 350:	540005a9 	b.ls	404 <mem_free+0xe8>  // b.plast
        printf("mem_free error: 0x%lx is not within pool %s\n", addr, pool->name);
        stkdump();
        return;
    }

    if (zero)
 354:	35000683 	cbnz	w3, 424 <mem_free+0x108>
        memset((void *)addr, 0, pool->usize * n);

    int idx = (addr - pool->base) / pool->usize;
 358:	f9400282 	ldr	x2, [x20]
 35c:	cb020273 	sub	x19, x19, x2
 360:	f9400a82 	ldr	x2, [x20, #16]
 364:	9ac20a62 	udiv	x2, x19, x2
    u32 token;
    wait_for_token(pool, token);
 368:	90000000 	adrp	x0, 0 <bitmap_create>
 36c:	91000000 	add	x0, x0, #0x0
 370:	91010000 	add	x0, x0, #0x40
 374:	c85f7c01 	ldxr	x1, [x0]
 378:	91000423 	add	x3, x1, #0x1
 37c:	c804fc03 	stlxr	w4, x3, [x0]
 380:	35ffffa4 	cbnz	w4, 374 <mem_free+0x58>
 384:	d5033bbf 	dmb	ish
 388:	12000824 	and	w4, w1, #0x7
 38c:	90000003 	adrp	x3, 0 <bitmap_create>
 390:	91000063 	add	x3, x3, #0x0
 394:	92400821 	and	x1, x1, #0x7
 398:	f8617860 	ldr	x0, [x3, x1, lsl #3]
 39c:	b4ffffe0 	cbz	x0, 398 <mem_free+0x7c>
 3a0:	2a0403e1 	mov	w1, w4
 3a4:	90000000 	adrp	x0, 0 <bitmap_create>
 3a8:	91000000 	add	x0, x0, #0x0
 3ac:	f821781f 	str	xzr, [x0, x1, lsl #3]
 3b0:	11000496 	add	w22, w4, #0x1
    for (int i = 0; i < n; i++)
 3b4:	710002bf 	cmp	w21, #0x0
 3b8:	5400014d 	b.le	3e0 <mem_free+0xc4>
 3bc:	2a0203f3 	mov	w19, w2
 3c0:	0b0202b5 	add	w21, w21, w2
        bitmap_clear(&pool->map, idx + i);
 3c4:	91008294 	add	x20, x20, #0x20
 3c8:	2a1303e1 	mov	w1, w19
 3cc:	aa1403e0 	mov	x0, x20
 3d0:	94000000 	bl	4c <bitmap_clear>
    for (int i = 0; i < n; i++)
 3d4:	11000673 	add	w19, w19, #0x1
 3d8:	6b15027f 	cmp	w19, w21
 3dc:	54ffff61 	b.ne	3c8 <mem_free+0xac>  // b.any
    return_token(pool, token);
 3e0:	92400ac4 	and	x4, x22, #0x7
 3e4:	90000000 	adrp	x0, 0 <bitmap_create>
 3e8:	91000000 	add	x0, x0, #0x0
 3ec:	d2800021 	mov	x1, #0x1                   	// #1
 3f0:	f8247801 	str	x1, [x0, x4, lsl #3]
 3f4:	a9425bf5 	ldp	x21, x22, [sp, #32]
}
 3f8:	a94153f3 	ldp	x19, x20, [sp, #16]
 3fc:	a8c37bfd 	ldp	x29, x30, [sp], #48
 400:	d65f03c0 	ret
 404:	a9425bf5 	ldp	x21, x22, [sp, #32]
        printf("mem_free error: 0x%lx is not within pool %s\n", addr, pool->name);
 408:	f9400e82 	ldr	x2, [x20, #24]
 40c:	aa1303e1 	mov	x1, x19
 410:	90000000 	adrp	x0, 0 <bitmap_create>
 414:	91000000 	add	x0, x0, #0x0
 418:	94000000 	bl	0 <printf>
        stkdump();
 41c:	94000000 	bl	0 <stkdump>
        return;
 420:	17fffff6 	b	3f8 <mem_free+0xdc>
        memset((void *)addr, 0, pool->usize * n);
 424:	93407c40 	sxtw	x0, w2
 428:	f9400a82 	ldr	x2, [x20, #16]
 42c:	9b027c02 	mul	x2, x0, x2
 430:	52800001 	mov	w1, #0x0                   	// #0
 434:	aa1303e0 	mov	x0, x19
 438:	94000000 	bl	0 <memset>
 43c:	17ffffc7 	b	358 <mem_free+0x3c>

0000000000000440 <mem_pool_create>:
 *  returns 0 on error, else a pointer to be used for
 *  subsequent mam_alloc() and mem_free() functions.
 */
struct mem_pool *
mem_pool_create(char * name, u64 base, u64 size, u64 usize, int zero)
{
 440:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
 444:	910003fd 	mov	x29, sp
 448:	a90153f3 	stp	x19, x20, [sp, #16]
 44c:	a9025bf5 	stp	x21, x22, [sp, #32]
 450:	a90363f7 	stp	x23, x24, [sp, #48]
 454:	a9046bf9 	stp	x25, x26, [sp, #64]
 458:	aa0003f8 	mov	x24, x0
 45c:	aa0103f5 	mov	x21, x1
 460:	aa0203f6 	mov	x22, x2
 464:	aa0303f4 	mov	x20, x3
 468:	2a0403f9 	mov	w25, w4
    // pool data structure and bitmap

    struct mem_pool * pool = (struct mem_pool *)base;

    int err = 0;
    if (n_bits_set(usize) != 1) {
 46c:	aa0303e0 	mov	x0, x3
 470:	94000000 	bl	0 <n_bits_set>
    int err = 0;
 474:	52800001 	mov	w1, #0x0                   	// #0
    if (n_bits_set(usize) != 1) {
 478:	7100041f 	cmp	w0, #0x1
 47c:	540006a1 	b.ne	550 <mem_pool_create+0x110>  // b.any
        printf("mem_pool_create error: usize must be a power of 2 (%d)\n", usize);
        stkdump();
        err++;
    }
    if (size < usize * 2) {
 480:	eb1406df 	cmp	x22, x20, lsl #1
 484:	54000743 	b.cc	56c <mem_pool_create+0x12c>  // b.lo, b.ul, b.last
 488:	f9002bfb 	str	x27, [sp, #80]
        printf("mem_pool_create error: size (%ld) must mimally be 2x unit size (only %ld)\n",
                name, size, usize);
        stkdump();
        err++;
    }
    if ((size % usize) != 0) {
 48c:	9ad40ac0 	udiv	x0, x22, x20
 490:	9b14d800 	msub	x0, x0, x20, x22
 494:	b50008e0 	cbnz	x0, 5b0 <mem_pool_create+0x170>
        printf("mem_pool_create error: size must be a multiple of usize\n");
        stkdump();
        err++;
    }
    if (err)
 498:	350009a1 	cbnz	w1, 5cc <mem_pool_create+0x18c>
    struct mem_pool * pool = (struct mem_pool *)base;
 49c:	aa1503fa 	mov	x26, x21
        return 0;

    // estimate nblks
    int eblks = (size + usize - 1) / usize;
 4a0:	d10006c5 	sub	x5, x22, #0x1
 4a4:	8b1400a5 	add	x5, x5, x20
 4a8:	9ad408a5 	udiv	x5, x5, x20
    // actual nblks
    int nblks = (size - sizeof(struct mem_pool)
                      - (eblks + BITS_PER_BYTE - 1) / BITS_PER_BYTE
 4ac:	d100a2d7 	sub	x23, x22, #0x28
 4b0:	110038a0 	add	w0, w5, #0xe
 4b4:	31001ca1 	adds	w1, w5, #0x7
 4b8:	1a814000 	csel	w0, w0, w1, mi  // mi = first
 4bc:	13037c00 	asr	w0, w0, #3
 4c0:	cb20c2f7 	sub	x23, x23, w0, sxtw
                 ) / usize;
 4c4:	9ad40af7 	udiv	x23, x23, x20

    pool->base  = base + usize * (eblks - nblks);
 4c8:	4b1700a5 	sub	w5, w5, w23
 4cc:	93407ca5 	sxtw	x5, w5
 4d0:	9b147ca5 	mul	x5, x5, x20
 4d4:	8b1500bb 	add	x27, x5, x21
 4d8:	f90002bb 	str	x27, [x21]
    pool->size  = size - usize * (eblks - nblks);
 4dc:	cb0502d3 	sub	x19, x22, x5
 4e0:	f90006b3 	str	x19, [x21, #8]
    pool->name  = name;
 4e4:	f9000eb8 	str	x24, [x21, #24]
    pool->usize = usize;
 4e8:	f9000ab4 	str	x20, [x21, #16]

    memset((void *)(pool->map.blks), 0, nblks / BLK_SIZE);
 4ec:	93407ef4 	sxtw	x20, w23
 4f0:	d346fe82 	lsr	x2, x20, #6
 4f4:	52800001 	mov	w1, #0x0                   	// #0
 4f8:	9100a2a0 	add	x0, x21, #0x28
 4fc:	94000000 	bl	0 <memset>
    if (zero)
 500:	350005d9 	cbnz	w25, 5b8 <mem_pool_create+0x178>
    map->nblks = (size + BLK_SIZE - 1) / BLK_SIZE;
 504:	9100fe94 	add	x20, x20, #0x3f
 508:	d346fe94 	lsr	x20, x20, #6
 50c:	b90022b4 	str	w20, [x21, #32]
    map->count = 0;
 510:	b90026bf 	str	wzr, [x21, #36]
        memset((void *)pool->base, 0, pool->size);

    bitmap_create(&pool->map, nblks);
    printf("mem_pool %-8s at 0x%lx end 0x%lx   %d units\n", name, base, base + size, nblks);
 514:	2a1703e4 	mov	w4, w23
 518:	8b1602a3 	add	x3, x21, x22
 51c:	aa1503e2 	mov	x2, x21
 520:	aa1803e1 	mov	x1, x24
 524:	90000000 	adrp	x0, 0 <bitmap_create>
 528:	91000000 	add	x0, x0, #0x0
 52c:	94000000 	bl	0 <printf>
    return pool;
 530:	f9402bfb 	ldr	x27, [sp, #80]
}
 534:	aa1a03e0 	mov	x0, x26
 538:	a94153f3 	ldp	x19, x20, [sp, #16]
 53c:	a9425bf5 	ldp	x21, x22, [sp, #32]
 540:	a94363f7 	ldp	x23, x24, [sp, #48]
 544:	a9446bf9 	ldp	x25, x26, [sp, #64]
 548:	a8c67bfd 	ldp	x29, x30, [sp], #96
 54c:	d65f03c0 	ret
        printf("mem_pool_create error: usize must be a power of 2 (%d)\n", usize);
 550:	aa1403e1 	mov	x1, x20
 554:	90000000 	adrp	x0, 0 <bitmap_create>
 558:	91000000 	add	x0, x0, #0x0
 55c:	94000000 	bl	0 <printf>
        stkdump();
 560:	94000000 	bl	0 <stkdump>
        err++;
 564:	52800021 	mov	w1, #0x1                   	// #1
 568:	17ffffc6 	b	480 <mem_pool_create+0x40>
        printf("mem_pool_create error: size (%ld) must mimally be 2x unit size (only %ld)\n",
 56c:	aa1403e3 	mov	x3, x20
 570:	aa1603e2 	mov	x2, x22
 574:	aa1803e1 	mov	x1, x24
 578:	90000000 	adrp	x0, 0 <bitmap_create>
 57c:	91000000 	add	x0, x0, #0x0
 580:	94000000 	bl	0 <printf>
        stkdump();
 584:	94000000 	bl	0 <stkdump>
    if ((size % usize) != 0) {
 588:	9ad40ac3 	udiv	x3, x22, x20
 58c:	9b14d874 	msub	x20, x3, x20, x22
        return 0;
 590:	d280001a 	mov	x26, #0x0                   	// #0
    if ((size % usize) != 0) {
 594:	b4fffd14 	cbz	x20, 534 <mem_pool_create+0xf4>
        printf("mem_pool_create error: size must be a multiple of usize\n");
 598:	90000000 	adrp	x0, 0 <bitmap_create>
 59c:	91000000 	add	x0, x0, #0x0
 5a0:	94000000 	bl	0 <printf>
        stkdump();
 5a4:	94000000 	bl	0 <stkdump>
        return 0;
 5a8:	d280001a 	mov	x26, #0x0                   	// #0
 5ac:	17ffffe2 	b	534 <mem_pool_create+0xf4>
 5b0:	f9402bfb 	ldr	x27, [sp, #80]
 5b4:	17fffff9 	b	598 <mem_pool_create+0x158>
        memset((void *)pool->base, 0, pool->size);
 5b8:	aa1303e2 	mov	x2, x19
 5bc:	52800001 	mov	w1, #0x0                   	// #0
 5c0:	aa1b03e0 	mov	x0, x27
 5c4:	94000000 	bl	0 <memset>
 5c8:	17ffffcf 	b	504 <mem_pool_create+0xc4>
        return 0;
 5cc:	d280001a 	mov	x26, #0x0                   	// #0
 5d0:	f9402bfb 	ldr	x27, [sp, #80]
 5d4:	17ffffd8 	b	534 <mem_pool_create+0xf4>
