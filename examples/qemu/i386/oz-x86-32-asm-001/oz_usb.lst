     1                                  ; OZ - A more utopian OS
     2                                  ; ex: set expandtab softtabstop=4 shiftwidth=4 nowrap :
     3                                  ;
     4                                  ;
     5                                  ;       x86-32 startup 
     6                                  ;
     7                                  ;
     8                                  ; usage:
     9                                  ;	$ qemu-system-i386 -boot a -fda oz_fd -monitor stdio
    10                                  ;
    11                                  ; requires: nasm-2.07  or later from: http://www.nasm.us
    12                                  ;
    13                                  ; contributors:
    14                                  ;        djv - Duane Voth
    15                                  ;
    16                                  ; history:
    17                                  ; 2007/03/03 - 0.00.01 - djv - begin with various web examples
    18                                  ;                      http://linuxgazette.net/issue82/misc/raghu/code.asm.txt
    19                                  ;                      http://www.osdever.net/tutorials/brunmar/simple_asm.txt
    20                                  ; 2007/03/04 - 0.00.02 - djv - add timer interrupt support with stray int dbg
    21                                  ; 2007/03/05 - 0.00.03 - djv - remove stray int dbg, add mbr data struc back
    22                                  ; 2007/03/11 - 0.00.04 - djv - debug USB boot problem
    23                                  
    24                                  %ifdef USB
    25                                  [map symbols oz_usb.map]
    26                                  %else
    27                                  [map symbols oz_fd.map]
    28                                  %endif
    29                                  
    30                                  ; -------- stage 1 ---------------------------------------------------------
    31                                  ; A classic x86 Master Boot Record
    32                                  
    33                                  section .text start=0x7c00  ; PC BIOS boot loader entry point
    34                                  codestart :
    35                                  
    36                                  bios_entry :
    37 00000000 FA                          cli
    38 00000001 EA[5200]0000                jmp 0:main              ; load cs, skip over mbr data struct
    39                                  
    40                                  times 6-($-$$)  db 0
    41 00000006 6F7A                    oemid db "oz"
    42                                  
    43 00000008 00<rept>                times 11-($-$$)  db 0
    44                                  
    45                                  ; compute the size of the kernel image in 512 byte sectors
    46                                  nsectors equ codesize/512
    47                                  
    48                                  ; MS MBR  (http://support.microsoft.com/kb/140418)
    49                                  %ifdef FLOPPY
    50                                      dw 512                  ; Bytes per sector
    51                                      db 1                    ; Sectors per cluster
    52                                      dw nsectors             ; Number of reserved sectors
    53                                      db 2                    ; Number of FATs
    54                                      dw 0x00e0               ; Number of dirs in root
    55                                      dw 0x0b40               ; Number of sectors in volume
    56                                      db 0xf0                 ; Media descriptor
    57                                      dw 9                    ; Number of sectors per FAT
    58                                      dw 18                   ; Number of sectors per track
    59                                      dw 2                    ; Number of heads
    60                                      dd 0                    ; Number of hidden sectors
    61                                      dd 0                    ; Large Sectors
    62                                  %endif
    63                                  
    64                                  %ifdef USB
    65 0000000B 0000                        dw 0                    ; Bytes per sector
    66 0000000D 00                          db 0                    ; Sectors per cluster
    67 0000000E 0000                        dw nsectors             ; Number of reserved sectors
    68 00000010 00                          db 0                    ; Number of FATs
    69 00000011 0000                        dw 0                    ; Number of dirs in root
    70 00000013 0000                        dw 0                    ; Number of sectors in volume
    71 00000015 00                          db 0                    ; Media descriptor
    72 00000016 0000                        dw 0                    ; Number of sectors per FAT
    73 00000018 0000                        dw 0                    ; Number of sectors per track
    74 0000001A 0000                        dw 0                    ; Number of heads
    75 0000001C 00000000                    dd 0                    ; Number of hidden sectors
    76 00000020 00000000                    dd 0                    ; Large Sectors
    77                                  %endif
    78                                  
    79                                  ; -------- protected-mode support functions --------
    80                                  bits 32
    81                                  
    82                                  align 4
    83                                  IRQA equ 32                 ; system timer interrupt (after remap)
    84                                  int_handler_timer :
    85 00000024 66B82000                    mov  ax,videosel        ; point gs at video memory
    86 00000028 8EE8                        mov  gs,ax
    87 0000002A 658A1D01000000              mov  bl,byte [gs:1]     ; inc the color of the first two chars
    88 00000031 FEC3                        inc  bl
    89 00000033 80E30F                      and  bl,0xf             ; just the foreground
    90 00000036 65881D01000000              mov  byte [gs:1],bl
    91 0000003D 65881D03000000              mov  byte [gs:3],bl
    92 00000044 B020                        mov  al,0x20
    93 00000046 E620                        out  0x20,al            ; signal end of interrupt (eoi)
    94 00000048 CF                          iret
    95                                  
    96                                  ;F - white
    97                                  ;E - yellow
    98                                  ;D - magenta
    99                                  ;C - red
   100                                  ;B - cyan
   101                                  ;A - green
   102                                  ;9 - blue
   103                                  ;8 - dark grey
   104                                  
   105 00000049 90<rept>                align 4
   106                                  IRQB equ 33                 ; keyboard interrupt (after remap)
   107                                  int_handler_kbd :
   108 0000004C FA                          cli
   109 0000004D B020                        mov  al,0x20
   110 0000004F E620                        out  0x20,al            ; signal end of interrupt (eoi)
   111 00000051 CF                          iret
   112                                  
   113                                  ; -------- main (enter protected mode) --------
   114                                  bits 16
   115                                  align 2
   116                                  
   117                                  main :
   118 00000052 B80070                      mov  ax,stack_loc
   119 00000055 89C4                        mov  sp,ax
   120 00000057 31C0                        xor  ax,ax
   121 00000059 8ED0                        mov  ss,ax
   122 0000005B 8EC0                        mov  es,ax
   123 0000005D 8ED8                        mov  ds,ax
   124 0000005F 8EE0                        mov  fs,ax
   125 00000061 8EE8                        mov  gs,ax
   126 00000063 FC                          cld
   127                                  
   128 00000064 52                          push dx                 ; save BIOS drive number
   129                                  
   130 00000065 B80006                      mov  ax,0x0600          ; ah=06h : scroll window up, if al = 0 clrscr
   131 00000068 B90000                      mov  cx,0x0000          ; clear window from 0,0 
   132 0000006B BA4F17                      mov  dx,0x174f          ; to 23,79
   133 0000006E B70F                        mov  bh,0xf             ; fill with hi white
   134 00000070 CD10                        int  0x10               ; clear screen for direct writes to video memory
   135                                  
   136 00000072 BE[3400]                    mov  si,bootmsg
   137 00000075 31DB                        xor  bx,bx
   138 00000077 E8C500                      call puts_vga_rm
   139                                                              ; puts_vga_rm leaves gs pointing at video mem
   140 0000007A 65C60601000E                mov  byte [gs:1],0xE    ; turn the first two chars yellow
   141 00000080 65C60603000E                mov  byte [gs:3],0xE
   142                                  
   143                                  ;   mov  ah,0x00            ; Fn 00h of int 16h: read next character
   144                                  ;   int  0x16               ; wait for the user to respond...
   145                                  
   146 00000086 0F0116[2800]                lgdt [gdtr]             ; initialize the gdt
   147 0000008B 0F20C0                      mov  eax,cr0
   148 0000008E 0C01                        or   al,0x01            ; set the protected mode bit (lsb of cr0)
   149 00000090 0F22C0                      mov  cr0,eax
   150 00000093 EA[9800]0800                jmp  codesel:flush_ip1  ; flush the cpu instruction pipeline
   151                                  flush_ip1: 
   152                                  bits 32                     ; instructions after this point are 32bit
   153                                  
   154 00000098 66B81000                    mov  ax,datasel   
   155 0000009C 8ED8                        mov  ds,ax              ; initialize the data segments
   156 0000009E 8EC0                        mov  es,ax
   157 000000A0 66B81800                    mov  ax,stacksel        ; setup a restricted stack segment
   158 000000A4 8ED0                        mov  ss,ax
   159                                  
   160                                      ; re-program the 8259's to move the hardware vectors
   161                                      ; out of the soft int range ... what were people thinking!
   162                                  
   163 000000A6 B011                        mov  al,0x11
   164 000000A8 E620                        out  0x20,al            ; init the 1st 8259
   165 000000AA B011                        mov  al,0x11
   166 000000AC E6A0                        out  0xA0,al            ; init the 2nd 8259
   167 000000AE B020                        mov  al,0x20
   168 000000B0 E621                        out  0x21,al            ; base the 1st 8259 at 0x20
   169 000000B2 B028                        mov  al,0x28
   170 000000B4 E6A1                        out  0xA1,al            ; base the 2nd 8259 at 0x28
   171 000000B6 B004                        mov  al,0x04
   172 000000B8 E621                        out  0x21,al            ; set 1st 8259 as master
   173 000000BA B002                        mov  al,0x02
   174 000000BC E6A1                        out  0xA1,al            ; set 2nd 8259 as slave
   175 000000BE B001                        mov  al,0x01
   176 000000C0 E621                        out  0x21,al
   177 000000C2 B001                        mov  al,0x01
   178 000000C4 E6A1                        out  0xA1,al
   179 000000C6 B000                        mov  al,0x00
   180 000000C8 E621                        out  0x21,al
   181 000000CA B000                        mov  al,0x00
   182 000000CC E6A1                        out  0xA1,al
   183                                  
   184                                      ; ---- debug marker
   185 000000CE 66B82000                    mov  ax,videosel        ; point gs at video memory
   186 000000D2 8EE8                        mov  gs,ax
   187 000000D4 65C605010000000A            mov  byte [gs:1],0xA    ; turn the first two chars green
   188 000000DC 65C605030000000A            mov  byte [gs:3],0xA
   189                                  
   190                                      ; ---- setup interrupt handlers
   191                                  
   192 000000E4 B8[24000000]                mov  eax,int_handler_timer
   193 000000E9 66A300610000                mov  [idt+IRQA*8],ax
   194 000000EF 66C705026100000800          mov  word [idt+IRQA*8+2],codesel
   195 000000F8 66C70504610000008E          mov  word [idt+IRQA*8+4],0x8E00
   196 00000101 C1E810                      shr  eax,16
   197 00000104 66A306610000                mov  [idt+IRQA*8+6],ax
   198                                  
   199 0000010A B8[4C000000]                mov  eax,int_handler_kbd
   200 0000010F 66A308610000                mov  [idt+IRQB*8],ax
   201 00000115 66C7050A6100000800          mov  word [idt+IRQB*8+2],codesel
   202 0000011E 66C7050C610000008E          mov  word [idt+IRQB*8+4],0x8E00
   203 00000127 C1E810                      shr  eax,16
   204 0000012A 66A30E610000                mov  [idt+IRQB*8+6],ax
   205                                  
   206 00000130 0F011D[2E000000]            lidt [idtr]                     ; install the idt
   207 00000137 66BC0004                    mov  sp,stack_size              ; initialize the stack
   208                                  
   209                                  
   210 0000013B FB                          sti
   211                                  idle :
   212 0000013C F4                          hlt                     ; wait for interrupts
   213 0000013D EBFD                        jmp  idle
   214                                  
   215                                  ; ----------------------------
   216                                  ;   puts_vga_rm - write a null delimited string to the VGA controller
   217                                  ;                  in real mode
   218                                  ;
   219                                  ;           esi - address of string
   220                                  ;           ebx - screen location (2 bytes per char, 160 bytes per line)
   221                                  ;           eax - destroyed
   222                                  ;            gs - destroyed
   223                                  bits 16
   224                                  
   225                                  puts_vga_rm :
   226 0000013F B800B8                      mov  ax,0xb800      ; point gs at video memory
   227 00000142 8EE8                        mov  gs,ax
   228                                  puts_vga_rm_loop :
   229 00000144 AC                          lodsb
   230 00000145 3C00                        cmp  al,0
   231 00000147 7409                        jz   puts_vga_rm_done
   232 00000149 658807                      mov  [gs:bx],al
   233 0000014C 6643                        inc  ebx
   234 0000014E 6643                        inc  ebx
   235 00000150 EBF2                        jmp  puts_vga_rm_loop
   236                                  puts_vga_rm_done :
   237 00000152 C3                          ret
   238                                  
   239 00000153 90<rept>                align 8                     ; only need 4 but 8 looks nicer when debugging
   240                                  codesize equ ($-codestart)
   241                                  
   242                                  ; ---------------------------------------------------------
   243                                  section .data
   244                                  datastart :
   245                                  
   246                                  ; -------- descriptors --------------
   247                                  ; Intel SW dev manual 3a, 3.4.5, pg 103
   248                                  ;
   249                                  ; In my opinion, macros for descriptor entries
   250                                  ; don't make the code that much more readable.
   251                                  
   252                                  gdt :
   253                                  nullsel equ $-gdt           ; nullsel = 0h
   254 00000000 0000000000000000            dd 0,0                  ; first descriptor per convention is 0
   255                                  
   256                                  codesel equ $-gdt           ; codesel = 8h  4Gb flat over all logical mem
   257 00000008 FFFF                        dw 0xffff               ; limit 0-15
   258 0000000A 0000                        dw 0x0000               ; base  0-15
   259 0000000C 00                          db 0x00                 ; base 16-23
   260 0000000D 9A                          db 0x9a                 ; present, dpl=0, code e/r
   261 0000000E CF                          db 0xcf                 ; 32bit, 4k granular, limit 16-19
   262 0000000F 00                          db 0x00                 ; base 24-31
   263                                  
   264                                  datasel equ $-gdt           ; datasel = 10h  4Gb flat over all logical mem
   265 00000010 FFFF                        dw 0xffff               ; limit 0-15
   266 00000012 0000                        dw 0x0000               ; base  0-15
   267 00000014 00                          db 0x00                 ; base 16-23
   268 00000015 92                          db 0x92                 ; present, dpl=0, data r/w
   269 00000016 CF                          db 0xcf                 ; 32bit, 4k granular, limit 16-19
   270 00000017 00                          db 0x00                 ; base 24-31
   271                                  
   272                                  stacksel equ $-gdt          ; stacksel = 18h  small limited stack
   273 00000018 0004                        dw stack_size           ; limit
   274 0000001A 0070                        dw stack_loc            ; base
   275 0000001C 00                          db 0
   276 0000001D 92                          db 0x92                 ; present, dpl=0, data, r/w
   277 0000001E 00                          db 0                    ; 16bit, byte granular
   278 0000001F 00                          db 0
   279                                  
   280                                  videosel equ $-gdt          ; videosel = 20h
   281 00000020 9F0F                        dw 3999                 ; limit 80*25*2-1
   282 00000022 0080                        dw 0x8000               ; base 0xb8000
   283 00000024 0B                          db 0x0b
   284 00000025 92                          db 0x92                 ; present, dpl=0, data, r/w
   285 00000026 00                          db 0x00                 ; byte granular, 16 bit
   286 00000027 00                          db 0x00
   287                                  
   288                                  gdt_end :
   289                                  
   290                                  gdtr :
   291 00000028 2700                        dw gdt_end - gdt - 1    ; gdt length
   292 0000002A [00000000]                  dd gdt                  ; gdt physical address
   293                                  
   294                                  idtr :
   295 0000002E 7F01                        dw idt_end - idt - 1    ; length of the idt
   296 00000030 00600000                    dd idt                  ; address of the idt
   297                                  
   298                                  
   299 00000034 4F5A2076302E30302E-     bootmsg     db      "OZ v0.00.04 - 2007/03/11  ",0
   300 0000003D 3034202D2032303037-
   301 00000046 2F30332F3131202000 
   302                                  
   303 0000004F 00<rept>                times 446-codesize-($-$$)  db 0 ; Fill with zeros up to the partition table
   304                                  
   305                                  %ifdef USB
   306                                  ; a partition table for my 512MB USB stick
   307 00000066 800101000610E0BE20-     db 0x80, 0x01, 0x01, 0, 0x06, 0x10, 0xe0, 0xbe, 0x20, 0, 0, 0, 0xe0, 0x7b, 0xf, 0
   308 0000006F 000000E07B0F00     
   309 00000076 000000000000000000-     db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   310 0000007F 00000000000000     
   311 00000086 000000000000000000-     db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   312 0000008F 00000000000000     
   313 00000096 000000000000000000-     db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   314 0000009F 00000000000000     
   315                                  %else
   316                                              ; A default partition table that matches a 1.44MB floppy
   317                                              db 0x80,0x01,0x01,0x00,0x06,0x01,0x12,0x4f
   318                                              db 0x12,0x00,0x00,0x00,0x2e,0x0b,0x00,0x00
   319                                              db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   320                                              db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   321                                              db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   322                                  %endif
   323                                  
   324                                  times 510-codesize-($-$$) db 0      ; fill with zeros up to MBR signature
   325                                  
   326 000000A6 55AA                                dw 0x0aa55      ; write aa55 in bytes 511,512 to indicate
   327                                                              ; that it is a boot sector. 
   328                                  
   329                                  idt equ 0x6000              ; use some of the free memory below us
   330                                  idt_end equ idt+48*8        ; 32 sw + 16 remapped hw vectors
   331                                  
   332                                  stack_loc  equ 0x7000
   333                                  stack_size equ 1024
   334                                  
   335                                  datasize equ ($-datastart)
   336                                  
   337                                  kend :
